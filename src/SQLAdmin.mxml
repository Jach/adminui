<?xml version="1.0" encoding="utf-8"?>
<!--
Dynamo Admin UI is a web service project for administering LucidDB
Copyright (C) 2010 Dynamo Business Intelligence Corporation

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version approved by Dynamo Business Intelligence Corporation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
-->
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:flexlib="http://code.google.com/p/flexlib/"
	xmlns:business="com.dynamobi.adminui.business.*" 
	xmlns:control="com.dynamobi.adminui.control.*"
	xmlns:components="com.dynamobi.adminui.components.*"
	layout="absolute" 
	creationComplete="init();" 
	keyUp="handleShortCuts(event);">
	
	<mx:Script> 
		<![CDATA[
            import com.adobe.cairngorm.business.ServiceLocator;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.dynamobi.adminui.components.CreateEditTableWindow;
            import com.dynamobi.adminui.components.DebugWindow;
            import com.dynamobi.adminui.components.ForeignDataWizard;
            import com.dynamobi.adminui.components.PerformanceMonitor;
            import com.dynamobi.adminui.components.QueryWindow;
            import com.dynamobi.adminui.components.RolesWindow;
            import com.dynamobi.adminui.components.SessionsWindow;
            import com.dynamobi.adminui.components.UsersAndRolesWindow;
            import com.dynamobi.adminui.components.UsersWindow;
            import com.dynamobi.adminui.components.ViewWindow;
            import com.dynamobi.adminui.events.ExecuteSQLEvent;
            import com.dynamobi.adminui.events.MetaDataEvent;
            import com.dynamobi.adminui.events.TableDetailsEvent;
            import com.dynamobi.adminui.model.ModelLocator;
            import com.dynamobi.adminui.view.AboutWindow;
            import com.dynamobi.adminui.view.FeedbackWindow;
            import com.dynamobi.adminui.view.LoginWindow;
            import com.dynamobi.adminui.view.OpenTableWindow;
            import com.dynamobi.adminui.vo.ConnectionVO;
            
            import flexlib.containers.SuperTabNavigator;
            import flexlib.controls.SuperTabBar;
            import flexlib.controls.tabBarClasses.SuperTab;
            import flexlib.events.SuperTabEvent;
            
            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            import mx.controls.ComboBox;
            import mx.events.DropdownEvent;
            import mx.events.ListEvent;
            import mx.managers.PopUpManager;
            import mx.rpc.soap.mxml.WebService;
			
			public var debug_win:DebugWindow;
			private var exectimer:Timer;
            
            [Bindable]
			public var DEBUG:Boolean;
			
			[Embed("/icons/close_tab.png")]
			public var closeTabImg : Class;
			[Embed("/icons/script_select.png")]
			public var QWimg : Class;
            [Embed("/icons/table_add.png")]
            public var NTimg:Class;
            [Embed("/icons/group.png")]
            public var UsersImg:Class;
            [Embed("/icons/script_add.png")]
            public var VWimg:Class;
            [Embed('/icons/lock.png')]
            public var usersandrolesImg:Class;
            [Embed('/icons/server_link.png')]
            public var foreign_dataImg:Class;

            
            private var tab_icons:Object = {};
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			public function init():void{
                
				DEBUG = false;
				
				if (DEBUG) {
					//Popup Debug
					debug_win = PopUpManager.createPopUp(this, DebugWindow, false) as DebugWindow;
					DebugWindow.log("main.mxml:init()");
					debug_win.visible = false;
				}
				
                tab_icons[String(QueryWindow)] = QWimg;
                tab_icons[String(CreateEditTableWindow)] = NTimg;
                tab_icons[String(UsersAndRolesWindow)] = usersandrolesImg;
                tab_icons[String(ViewWindow)] = VWimg;
                tab_icons[String(ForeignDataWizard)] = foreign_dataImg;
                
				//Regiser Some Things with the model
				model.main_tabnav = tabnavigator;
				// Initial tab:
				callLater(addTab, ["Default Query Window", QueryWindow]);
				
				//Locate and load the wsdl page
				var urlpattern:RegExp = /SQLAdmin.swf/i; 
				var wsdl:String = "";
				try {
                    if(parameters.webservice == undefined || parameters.webservice == '' ){
                        wsdl = "/adminws/ns0.wsdl";
                    } else {
                        wsdl = parameters.webservice;
                    }

					DebugWindow.log("Using WSDL location - " + wsdl);
                    var services:Array = ['sqlWebService'
                        , 'TableDetailsService'
                        , 'UsersAndRolesService'
                        , 'PerformanceCountersService'
                        , 'ForeignDataService'
                        , 'AutoIndexService'
                        ];
                    for each (var name:String in services) {
                        var s:WebService = ServiceLocator.getInstance().getService(name) as WebService;
                        s.wsdl = wsdl;
                        s.loadWSDL();
                    }
				} catch (e:Error) {
					mx.controls.Alert.show("Error Loading WSDL", "WSDL Error");
				}				
				
				//Popup the login box later so it properly steals focus.
				callLater(showLogin, [true]);
				
			}
			
			private function openTable(table:String):void{
				var opentablewindow:OpenTableWindow = OpenTableWindow(PopUpManager.createPopUp(this, OpenTableWindow, true));
				opentablewindow.setStyle("borderAlpha", 0.8);
				opentablewindow.showCloseButton = true; 
				opentablewindow.setTablename(table);
			}
			
            /**
            * @param firstTime - Used for initializing first query tab
            * 
            */
			private function showLogin(firstTime : Boolean = false) : void {
				DebugWindow.log("main.mxml:showLogin()");
				var loginForm:LoginWindow = LoginWindow(PopUpManager.createPopUp(this, LoginWindow, true));
				loginForm.setStyle("borderAlpha", 0.8);
				loginForm.showCloseButton = true;
				if (firstTime) { // need to remove closability from initial tab at this point.
					callLater(function():void {
                        tabnavigator.setClosePolicyForTab(0, SuperTab.CLOSE_NEVER);
                    });
				}
			}
			
			private function loadMetaData():void{
				DebugWindow.log("main.xml:loadMetaData() - Connection " + model.connectionVO.getConnectionString());
				var catalog:String = mycatalog.selectedItem.CATALOG_NAME;
				var metaevent:MetaDataEvent = new MetaDataEvent(catalog);
				CairngormEventDispatcher.getInstance().dispatchEvent(metaevent);
			}
			
			private function toggleDebugWindow():void {
				DebugWindow.log("main.xml:toggleDebugWindow()");
				if (DEBUG) {
					debug_win.visible = (debug_win.visible) ? false : true;
				}
			}
					
            public function addTab(lbl:String, window:Class, icon:Class=null,
                                    navigator:SuperTabNavigator=null) : Object {
                var win_name:String = window.toString();
                if (!model.tabs.hasOwnProperty(win_name)) {
                    model.tabs[win_name] = new Object();
                    model.tabs[win_name]._length = 0;
                }
                
                var added_obj:Object = new window();
                added_obj.id = win_name + '-' + (model.tabs[win_name]._length + 1).toString();
                model.tabs[win_name][added_obj.id] = added_obj; 
                model.tabs[win_name]._length += 1;

                var child:VBox = new VBox();
                child.percentWidth = 100;
                child.percentHeight = 100;
                child.setStyle("closable", true);
                
                child.label = lbl;
                child.id = child.name = added_obj.id;
                if (icon == null && arguments.length == 2)
                    if (tab_icons.hasOwnProperty(win_name))
                        icon = tab_icons[win_name];
                child.icon = icon;
                child.addChild(DisplayObject(added_obj));

                if (navigator == null)
                    navigator = model.main_tabnav;
                navigator.addChild(child);
                navigator.selectedIndex = navigator.numChildren - 1;

                return added_obj;
            }
            
			private function destroyTab(e : SuperTabEvent) : void {
                const id:String = VBox(tabnavigator.getChildAt(e.tabIndex)).id;
                const name:String = id.split('-')[0];
				DebugWindow.log("main.mxml:destroyTabButton() - " + id);
                if (name == String(SessionsWindow))
                    SessionsWindow(model.tabs[name][id]).sessionTimer.stop();
                if (name == String(PerformanceMonitor))
                    PerformanceMonitor(model.tabs[name][id]).update_timer.stop();
                delete model.tabs[name][id];
			}
			
			private function showAboutWindow():void{
				var aboutWindow:AboutWindow = AboutWindow(PopUpManager.createPopUp(this, AboutWindow, true));
				aboutWindow.setStyle("borderAlpha", 0.8);
				aboutWindow.showCloseButton = true;
			}
            
            private function toggleFeedback():void {
                var feedWin:FeedbackWindow = FeedbackWindow(PopUpManager.createPopUp(this, FeedbackWindow, true));
                feedWin.setStyle("borderAlpha", 0.8);
                feedWin.showCloseButton = true;
            }
			
			private function handleShortCuts(e:KeyboardEvent):void{
				if (e.ctrlKey && e.keyCode == 84) // ctrl+T
					addTab('Query Window', QueryWindow);
				else if (e.ctrlKey && e.keyCode == 82) // ctrl+R
					loadMetaData();
				else if (e.ctrlKey && e.shiftKey && e.keyCode == 68) // ctrl+shift+D
					toggleDebugWindow();
                else if (e.ctrlKey && e.keyCode == 78) // ctrl+N
                    addTab('Create Table', CreateEditTableWindow);
			}
			
			private function changeHandler(event:Event):void {
				
				var my:ComboBox = ComboBox(event.target);
				var metadata:MetaDataEvent = new MetaDataEvent(ComboBox(event.target).selectedItem.CATALOG_NAME);
				CairngormEventDispatcher.getInstance().dispatchEvent(metadata);
			}   

            private function add_item_click(event:DropdownEvent) : void {
                // Hack to only continue if they clicked inside the items box.
                if (event.triggerEvent != null || !(573 > this.contentMouseX && this.contentMouseX > 360 &&
                    35 < this.contentMouseY && this.contentMouseY < 35 + 25*5))
                    return;
                add_item_change(event as ListEvent);
            }
            
            private function add_item_change(event:ListEvent) : void {
               //trace(this.contentMouseX + ' ' + this.contentMouseY);
                var selected:Object = add_item_list.selectedItem;
                if (selected.action == 'query') {
                    addTab('Query Window', QueryWindow);
                } else if (selected.action == 'table') {
                    addTab('New Table', CreateEditTableWindow);
                } else if (selected.action == 'users') {
                    UsersAndRolesWindow(addTab('Users', UsersAndRolesWindow)).currentState = 'users';
                } else if (selected.action == 'roles') {
                    UsersAndRolesWindow(addTab('Roles', UsersAndRolesWindow)).currentState = 'roles';
                } else if (selected.action == 'views') {
                    addTab('New View', ViewWindow);
                } else if (selected.action == 'foreign_data') {
                    addTab('New Foreign Data Server', ForeignDataWizard);
                }
            }
            
		]]>
	</mx:Script>
	
	<!-- the ServiceLocator where we specify the remote services -->
	<business:Services id="loginServices" />
	
	<!-- the FrontController, containing Commands specific to this appliation -->
	<control:Controller id="controller" />
	
    <mx:Style>
        @namespace mx "http://www.adobe.com/2006/mxml";
        
        global {
            color: #09323B;
        }
        
        mx|Button, mx|TabNavigator {
            color: #08222A;
            font-weight: bold;
        }
        
        mx|Application{
            paddingLeft: 10px;
            paddingRight: 10px;
            paddingTop: 10px;
            paddingBottom: 10px;
            backgroundGradientColors: #AEC5E7, #5E8ED7;
        }
        mx|HDividedBox{
            paddingLeft: 10px;
            paddingRight: 10px;
            paddingTop: 10px;
            paddingBottom: 10px;
        }
        mx|TextArea {
            fontFamily: Verdana; 
            fontSize: 12pt;
        }
    </mx:Style>
    
	<mx:HDividedBox width="100%" height="100%" horizontalGap="5" liveDragging="true">
		
		<mx:VBox height="100%" width="35%" >
			<mx:HBox width="100%">
				<!--<mx:Button click="loadMetaData();" icon="@Embed(source='/icons/cog.png')" toolTip="(CTRL-R) Refresh Object Browser" label="Refresh"/>-->
				<mx:ComboBox id ="mycatalog" dataProvider="{model.catalogdata}" labelField="CATALOG_NAME" selectedIndex="0" close="changeHandler(event)"/>
                <mx:Button click="new_metadata_tree.init();" icon="@Embed(source='/icons/arrow_refresh.png')" label="Refresh" />
			</mx:HBox>
            <components:ObjectTree id="new_metadata_tree" />
			<!--<components:ObjectBrowser id="metadata_tree" dataProvider="{model.metadata}"/>-->
            </mx:VBox>
		
		<mx:VDividedBox width="100%" height="100%" verticalGap="5" liveDragging="true">
			
			<mx:Box width="100%" height="50%">
				<mx:HBox width="100%">
          <mx:ComboBox id="add_item_list" close="add_item_click(event);" height="25">
            <mx:Object label="Launch Query Tab" action="query" />
            <mx:Object label="New Table" action="table" />
            <mx:Object label="New User" action="users" />
            <mx:Object label="New Role" action="roles" />
            <mx:Object label="New View" action="views" />
            <mx:Object label="New Foreign Data Server" action="foreign_data" />
          </mx:ComboBox>
					<mx:Spacer width="100%"/>
                    <mx:Button label="Debug Window" click="toggleDebugWindow();" visible="{DEBUG}" />
                    <mx:Button label="Send Us Feedback" toolTip="Send Us Feedback" click="toggleFeedback();"
                               icon="@Embed(source='/icons/comment.png')" />
					<mx:Button click="showAboutWindow();" icon="@Embed(source='/icons/information.png')" label="About" toolTip="About"/>
				</mx:HBox>
				<flexlib:SuperTabNavigator id="tabnavigator" width="100%" height="100%" alpha=".8"
										   stopScrollingEvent="{MouseEvent.MOUSE_OUT}" startScrollingEvent="{MouseEvent.MOUSE_OVER}"
										   horizontalGap="0" tabClose="destroyTab(event);"
										   closePolicy="{SuperTab.CLOSE_ALWAYS}"
                                           editableTabLabels="true"
										   />
				
			</mx:Box>
			<mx:HBox width="100%">
				<mx:Label fontWeight="bold" text="Elapsed Execution Time: {model.exectimer.time} sec(s)"/>
				<mx:Spacer width="100%"/>
				<mx:Button click="showLogin();" label="Reconnect" icon="@Embed(source='/icons/connect.png')"/>
				<mx:Label fontWeight="bold" text="{model.connectionText}"/>
			</mx:HBox>
	
		</mx:VDividedBox>
	</mx:HDividedBox>
</mx:Application>
