<?xml version="1.0" encoding="utf-8"?>
<!--
Dynamo Admin UI is a web service project for administering LucidDB
Copyright (C) 2010 Dynamo Business Intelligence Corporation

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version approved by Dynamo Business Intelligence Corporation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
-->
<mx:Tree xmlns:mx="http://www.adobe.com/2006/mxml"
         itemRenderer="com.dynamobi.adminui.components.ObjectTreeRenderer"
         dataDescriptor="{new ObjectTreeDataDescriptor()}"
         dragMoveEnabled="false" 
         height="95%" width="100%" 
         doubleClickEnabled="true"
         labelField="@label" 
         showRoot="false" 
         dataProvider="{tree_data}"
         keyUp="debug(event);"
         creationComplete="init();">
    <mx:Script>
        <![CDATA[
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.adobe.serialization.json.JSON;
            import com.dynamobi.adminui.commands.ForeignDataCommand;
            import com.dynamobi.adminui.commands.GenerateDdlCommand;
            import com.dynamobi.adminui.components.DebugWindow;
            import com.dynamobi.adminui.components.ObjectTreeRenderer;
            import com.dynamobi.adminui.events.ExecuteSQLEvent;
            import com.dynamobi.adminui.events.GeneralServiceEvent;
            import com.dynamobi.adminui.events.MetaDataEvent;
            import com.dynamobi.adminui.events.TableDetailsEvent;
            import com.dynamobi.adminui.model.ModelLocator;
            import com.dynamobi.adminui.utils.ActionEnum;
            import com.dynamobi.adminui.view.ForeignTableImportWindow;
            import com.dynamobi.adminui.view.IndexesWindow;
            import com.dynamobi.adminui.view.NewJarWindow;
            import com.dynamobi.adminui.view.NewSchemaWindow;
            import com.dynamobi.adminui.view.OpenTableWindow;
            
            import mx.containers.VBox;
            import mx.controls.Alert;
            import mx.controls.Menu;
            import mx.core.FlexGlobals;
            import mx.core.INavigatorContent;
            import mx.events.CloseEvent;
            import mx.events.ListEvent;
            import mx.events.MenuEvent;
            import mx.managers.PopUpManager;
            import mx.utils.StringUtil;

            [Embed("/icons/table_edit.png")]
            public var ETimg:Class;
            [Embed("/icons/script_edit.png")]
            public var VWedImg:Class;

            [Embed(source="/icons/script_select.png")]
            private var selecticon:Class;
            [Embed(source="/icons/script_add.png")]
            private var inserticon:Class;
            [Embed(source="/icons/script_edit.png")]
            private var updateicon:Class;
            [Embed(source="/icons/script_delete.png")]
            private var deleteicon:Class;
            [Embed(source="/icons/open_table.png")]
            private var opentableicon:Class;
            [Embed(source="/icons/script_exec.png")]
            private var scriptexec:Class;
            
            [Embed("/icons/close_tab.png")]
            public var closeicon : Class;
            [Embed("/icons/confirm.png")]
            public var confirmicon : Class;

            
            [Embed(source="/icons/database_add.png")]
            private var add_schema_icon:Class;
            [Embed(source="/icons/delete.png")]
            private var drop_icon:Class;
            [Embed(source="/icons/add.png")]
            private var add_icon:Class;
            [Embed(source="/icons/group_edit.png")]
            private var edit_user_icon:Class;
            [Embed(source="/icons/report.png")]
            private var counters_icon:Class;
            [Embed(source="/icons/report_user.png")]
            private var sessions_icon:Class;
            [Embed(source="/icons/server_connect.png")]
            private var server_verify_icon:Class;
            [Embed(source="/icons/server_edit.png")]
            private var server_edit_icon:Class;
            [Embed(source="/icons/arrow_down.png")]
            private var import_foreign_icon:Class;
            [Embed(source="/icons/page_white_text.png")]
            private var ddl_icon:Class;
            [Embed(source="/icons/indexes2-16.png")]
            private var indexicon:Class;
            
            private var clickx:int = 0;
            private var clicky:int = 0;
            private var click_interval:Number = 0;
            
            private var menu_closed:Boolean = true;
            private var model:ModelLocator = ModelLocator.getInstance();
            
            [Bindable]
            public var tree_data:XML = new XML();
            
            private var object_menus:Object = new Object();
            
            public function debug(e:KeyboardEvent) : void {
                if (!FlexGlobals.topLevelApplication.DEBUG) { return; }
                if (e.keyCode == 78) {// N
                    trace(tree_data.toXMLString());
                }
            }

            /**
            * Set up the skeleton for our tree, along with a few mouse click event handlers.
            * Finally calls the function to setup all of the context menus and their handlers.
            */
            public function init() : void {
                model.object_tree = this;
                var schemas_load:String = JSON.encode(
                    {'service': 'sqlWebService', 'operation': 'getDBMetaData',
                     'arguments': {'connection': '', 'catalog': model.currentcatalogname},
                     'tree_callback': 'addSchemaElementLoaders'
                    }
                );
                var users_load:String = JSON.encode({'service': 'sqlWebService', 'operation': 'getUsers',
                    'arguments': {}});
                var roles_load:String = JSON.encode({'service': 'sqlWebService', 'operation': 'getRoles',
                    'arguments': {}});
                var remote_data_load:String = JSON.encode({'service': 'sqlWebService',
                    'operation': 'getRemoteData', 'arguments': {}});
                
                var skeleton:XML = <tree>
                    <schemas label="Schemas" loadInfo={schemas_load}>
                    </schemas>
                    <security label="Security">
                        <users label="Users" loadInfo={users_load}>
                        </users>
                        <roles label="Roles" loadInfo={roles_load}>
                        </roles>
                    </security>
                    <remote_data label="Foreign Data Wrappers and Servers" loadInfo={remote_data_load}>
                    </remote_data>
                    <system label="System">
                        <counters label="Counters" />
                        <!--<configuration label="Configuration" />-->
                        <sessions label="Active User Sessions" />
                    </system>
                    </tree>;
                    /*<networks label="Networks">
                        <network label="network.dynamobi.com">
                            <package label="SFDC package" />
                            <package label="Stats package" />
                            <package label="Zendesk package" />
                            <package label="Google Analytics package" />
                        </network>
                    </networks>
                    </tree>
                    ;*/
                tree_data = skeleton;
                
                var expandTree:Function = function():void {
                    clearInterval(click_interval);
                    expandItem(selectedItem, !isItemOpen(selectedItem), true, true);
                };
                
                this.addEventListener(MouseEvent.CLICK, clickHandler, false, 1);
                this.addEventListener(ListEvent.ITEM_CLICK, listItemClickHandler, false, 2);
                this.addEventListener(ListEvent.ITEM_DOUBLE_CLICK, expandTree, false, 5);
            
                // This is the meat of our tree and is an incredibly long function
                // mostly due to the amount of configuration for all of the context menus.
                register_contexts_and_handlers();
            }
            
            public function addSchemaElementLoaders(schema_name:String=null) : void {
                
                for each (var schema:XML in tree_data.schemas.children()) {
                    /*
                    var foreign_tables_load:String = JSON.encode({'service': 'sqlWebService',
                        'operation': 'getForeignTables',
                        'arguments': {schema: String(schema.@label)}});
                    schema.foreign_tables.@loadInfo = foreign_tables_load;
                    */
                    if (schema_name != null && schema_name != String(schema.@label))
                        continue;
                    var functions_load:String = JSON.encode({'service': 'sqlWebService',
                        'operation': 'getFunctions',
                        'arguments': {schema: String(schema.@label)}});
                    schema.functions.@loadInfo = functions_load;
                    var procedures_load:String = JSON.encode({'service': 'sqlWebService',
                        'operation': 'getProcedures',
                        'arguments': {schema: String(schema.@label)}});
                    schema.procedures.@loadInfo = procedures_load;
                    var jars_load:String = JSON.encode({'service': 'sqlWebService', 'operation': 'getJars',
                        'arguments': {schema: String(schema.@label)} });
                    schema.jars.@loadInfo = jars_load;
                }
            }
            
            // These three functions do all our mouse click event handling.
            
            private function clickHandler(e:MouseEvent):void{
                clickx = e.stageX;
                clicky = e.stageY;
            }
            
            private function listItemClickHandler(event:ListEvent) : void {
                // We use click intervals to get a better doubleClick than Flex's
                // normal behavior because of interference with single-click
                // context menus.
                clearInterval(click_interval);
                click_interval = setInterval(deferredListItemClickHandler, 200);
            }
            
            private function deferredListItemClickHandler() : void {
                clearInterval(click_interval);
                
                if (object_menus.hasOwnProperty(XML(selectedItem).localName())) {
                    if (menu_closed) {
                        menu_closed = false;
                        var context:ObjectTree = this;
                        var menu_info:Object = object_menus[XML(selectedItem).localName()];
                        var myMenu:Menu = Menu.createMenu(null, menu_info['info']);
                        myMenu.show(clickx + 25, clicky);
                        if (clicky > 400)
                            myMenu.y -= myMenu.height;
                        myMenu.addEventListener(MenuEvent.ITEM_CLICK, function(event:MenuEvent):void {
                            menu_info['handler'](event.index, context);
                        });
                        myMenu.addEventListener(Event.CLOSE, function():void { menu_closed = true; });
                    } else {
                        menu_closed = true;
                    }
                }
            }
            

            
            //////////////////////////////////////////////////////////////////////////////////////            
            // Define many helper functions and abstraction functions for
            // register_contexts_and_handlers().
            //////////////////////////////////////////////////////////////////////////////////////  
            

            

            /**
            * Creates a context menu along with its corresponding handler function called
            * when an item in the menu is clicked.
            * 
            * @element - The XML tag name this context menu maps to.
            * @menu_info - An array of objects passed to the Menu creator that determine labels, icons, 
            *              separators, and groups.
            * @handler - form: function(index:Number, context:ObjectTree). Will be called on a click,
            *            the index being the clicked item's index and the context being
            *            this entire ObjectTree.
            */ 
            private function register_context(element:String, menu_info:Array, handler:Function) : void {
                object_menus[element] = {'info': menu_info, 'handler': handler};
            }
            
            /**
            * Generic handler for when we want a popup view for some action.
            * 
            * @cl - The class type of the view we're loading.
            * @close - An optional function to call when the window is closed.
            * 
            * @return - Returns the created view for potential customization by the caller.
            */
            private function popup_new(cl:Class, close:Function=null) : Object {
                var win:Object = Object(PopUpManager.createPopUp(parent.parent, cl, true));
                win.setStyle("borderAlpha", 0.8);
                win.showCloseButton = true;
                if (close != null) {
                    win.addEventListener(Event.CLOSE, close);
                }
                return win;
            }
            
            /**
            * Simple wrapper for a handler function, useful for the singleton
            * 'add new' items that create a popup.
            * 
            * @inner_func - Custom inner function to call.
            * @args - Optional arguments to pass to the inner function.
            * 
            * @return - Returns the created handler function. (This is like a decorator.) 
            */
            private function handler_wrapper(inner_func:Function=null, args:Array=null) : Function {
                return function(index:Number, context:ObjectTree) : void {
                    if (inner_func != null && index == 0) {
                        if (args != null) {
                            inner_func.apply(context, args);
                        } else {
                            inner_func();
                        }
                    }
                }
            }

            /**
            * Generic function to drop an item and remove it from our tree.
            */
            private function drop_remove_item(item:String, cascade:Boolean,
                                              warn_msg:String, success_msg:String,
                                              context:ObjectTree, remove_item:XML) : void {
                var casc:String = (cascade) ? 'CASCADE' : '';
                query_dispatcher('DROP ' + item + ' ' + casc,
                    warn_msg,
                    function(querydata:XML):void {
                        if (querydata.datamap == 'Error') {
                            Alert.show(querydata.NewDataSet.Table.Error, 'Error');
                        } else {
                            Alert.show(success_msg, 'Success');
                            context.deleteItem(remove_item);
                        }
                    }
                );
            }
            
            /**
            * Flex is really stupid about this,
            * so we have to use this method to delete an item we have the node for.
            * 
            * @return - The success of the delete.
            */
            public function deleteItem(item:XML) : Boolean {
                var parent_list:XMLList = XMLList(item.parent().children());
                for (var i:Number = 0; i < parent_list.length(); i++) {
                    if (parent_list[i] == item) {
                        try {
                            delete parent_list[i];
                        } catch (e:Error) {
                        }
                        return true;
                    }
                }
                return false;
            }
            
            /**
             * Adds a new schema to our tree.
             * TODO: abstract this into a generalized function like remove.
             */
            public function addSchema(name:String) : void {
                var node:XML = <schema label={name}><tables label="Tables" /><views label="Views" /><foreign_tables label="Foreign Tables" /><functions label="Functions" /><procedures label="Procedures" /><jars label="Jars" /></schema>;
                for (var i:Number = 0; i < tree_data.schemas.children().length(); i++) {
                    if (tree_data.schemas.schema[i].@label < name)
                        continue;
                    tree_data.schemas.insertChildBefore(tree_data.schemas.schema[i], node);
                    addSchemaElementLoaders(name);
                    return;
                }
                tree_data.schemas.appendChild(node);
                addSchemaElementLoaders(name);
            }
            
            /**
            * This is our generic add loader; need to abstract
            * the other add functions as special cases of this one.<br /><br />
            * 
            * Example usage:<br />
            * model.object_tree.addItem('user', user.toUpperCase(), 'security', 'users');
            * will descend to &lt;security&gt;&lt;users&gt; and add
            *  &lt;user label="{user.toUpperCase()}" /&gt;.
            * 
            * <br /><br />
            * Example usage:<br />
            * model.object_tree.addItem('server', server_name.text.toUpperCase(),<br />
            *            'remote_data', 'wrapper&#64;', wrapper_list.selectedLabel, 'servers');
            * the '&#64;' at the end of 'wrapper' signifies that the next argument is a condition, so it
            * will select the first 'wrapper' element where &#64;label == the next argument.
            * 
            * @return Returns the added item as XML in case you want to do more with it (like add extra
            * attributes). Will return null when the parent can be expanded with a loadInfo call.
            */
            // doc note, &#64; is the @
            public function addItem(tag:String, label:String, ... structure) : XML {
                var parent:XML = tree_data[structure[0]][0];
                var node:XML = <{tag} label={label} />;
                for (var i:Number = 1; i < structure.length; i++) {
                    if (String(structure[i]).charAt(structure[i].length - 1) == '@') {
                        parent = parent[String(structure[i]).slice(0, -1)].(@label == structure[i+1])[0];
                        i++;
                    } else {
                        parent = parent[structure[i]][0];
                    }
                }
                if (parent.children().length() == 0 && parent.hasOwnProperty('@loadInfo')) {
                    // should only call this on a successful post anyway, so whatever was added
                    // should be returned in the call.
                    expandItem(parent, true);
                    return null;
                }
                for (i = 0; i < parent.children().length(); i++) {
                    if (parent.children()[i].@label < label)
                        continue;
                    parent.insertChildBefore(parent.children()[i], node);
                    return node;
                }
                parent.appendChild(node);
                return node;
            }
            
            /**
            * New view..
            */
            public function addView(schema:String, name:String, cols:String) : void {
                var sql:String = "SELECT " + cols + " FROM &quot;" + schema +
                    "&quot;.&quot;" + name + "&quot;";
                var node:XML = <view label={name} sqlquery={sql}></view>;
                for each (var col:String in cols.split(',')) {
                    col = StringUtil.trim(col);
                    node.appendChild(<column column={col} label={col} />);
                }
                var schema_node:XML = tree_data.schemas.schema.(@label == schema)[0];
                for (var i:Number = 0; i < schema_node.views.children().length(); i++) {
                    if (schema_node.views.view[i].@label < name)
                        continue;
                    schema_node.views.insertChildBefore(schema_node.views.view[i], node);
                    return;
                }
                schema_node.views.appendChild(node);
            } 
            
            
            /**
             * Adds a new table with columns to our tree.
             * TODO: possibly abstract this into a generalized function like remove. (Too hard for
             * this one?)
             */
            public function addTable(schema:String, name:String, details:XML) : void {
                var cols:String = '';
                var col_nodes:XMLList = new XMLList();
                for (var i:Number = 0; i < details.children().length(); i++) {
                    cols += "&quot;" + String(details.column[i].@name).toUpperCase() + "&quot;";
                    var label:String = String(details.column[i].@name).toUpperCase() + ' (' + details.column[i].@datatype + ',';
                    label += (details.column[i].@isNullable == 'true') ? 'NULL' : 'NOT NULL';
                    label += ')';
                    col_nodes += <column column={String(details.column[i].@name).toUpperCase()} label={label} />;
                }
                var sql:String = "SELECT " + cols + " FROM &quot;" + schema + "&quot;.&quot;" + name + "&quot;";
                var node:XML = <table label={name} sqlquery={sql}>
                {col_nodes}
                </table>;
                var schema_node:XML = tree_data.schemas.schema.(@label == schema)[0];
                for (i = 0; i < schema_node.tables.children().length(); i++) {
                    if (schema_node.tables.table[i].@label < name)
                        continue;
                    if (schema_node.tables.table[i].@label == name) {
                        callLater(function():void { delete schema_node.tables.table[i+1]; });
                    }
                    schema_node.tables.insertChildBefore(schema_node.tables.table[i], node);
                    return;
                }
                schema_node.tables.appendChild(node);
            }

            /**
            * Util for grabbing the column names of the selected item (assumed to be a table
            * or something with column children), with the option of appending something to the
            * quoted identifier.
            */
            private function get_column_names(context:ObjectTree, append:String='') : String {
                var cols:String = '';
                for (var x:Number = 0; x < context.selectedItem.children().length(); x++){
                    cols += "&quot;" + context.selectedItem.column[x].@column + "&quot;" + append;
                    if (x + 1 < this.selectedItem.children().length())
                        cols += ", \r";
                }
                if (cols == '') cols = '*';
                return cols;
            }
            
            /**
            * Util for getting the schema name of the selected item; assumes something like
            * a schema->between_item->selected_item.
            */
            private function get_schema(context:ObjectTree) : String {
                return context.getParentItem(context.getParentItem(context.selectedItem)).@label;
            }
            
            /**
            * Util for creating a script as query from the selected item.
            */
            private function script_as_query(context:ObjectTree) : void {
                var query:String = "SELECT ";
                var schema:String = get_schema(context);
                query += get_column_names(context);
                query += "\rFROM " + "\"" + context.model.currentcatalogname + "\".\"" + 
                    schema + 
                    "\".\"" + context.selectedItem.@label + "\"";
                script_query(query, schema);
            }
            
            /**
            * Inserts query text into an empty query window.
            */
            public function script_query(query:String, guessed_schema:String='') : void {
                var qw:QueryWindow = model.tabs[String(QueryWindow)][VBox(model.main_tabnav.selectedChild).id];
                if (qw && qw.isEmpty()) {
                    qw.setText(query);
                } else {
                    qw = QueryWindow(FlexGlobals.topLevelApplication.addTab("Query Window", QueryWindow));
                    qw.setText(query);
                }
                qw.guessed_schema = guessed_schema;
            }
            
            /**
            * Dispatches a query which uses an Alert Confirmation before running.
            * 
            * @query - Query to execute
            * @warn_msg - Confirmation message to send
            * @special_func - Optional function to call on success instead of using the default
            *                 executesql behavior.
            */
            private function query_dispatcher(query:String, warn_msg:String,
                                              special_func:Function=null) : void {
                Alert.show(warn_msg, "Confirmation", Alert.YES|Alert.NO,
                    FlexGlobals.topLevelApplication as Sprite,
                    function(event:CloseEvent):void { // confirm handler
                        if (event.detail == Alert.YES) {
                            if (special_func == null) {
                                var sqlevent:ExecuteSQLEvent = new ExecuteSQLEvent(query, "normal");
                            } else {
                                sqlevent = new ExecuteSQLEvent(query, "special", special_func);
                            }
                            CairngormEventDispatcher.getInstance().dispatchEvent(sqlevent);
                        }
                    }, confirmicon, Alert.NO);
            }
            

            
            /**
            * Mega function that sets up all of our context menus with their
            * corresponding handlers.
            * 
            * TODO: Implement the commented out menu items.
            */
            public function register_contexts_and_handlers() : void {
                var con_row:Function = function (label:String, icon:Class) : Object {
                    return {'label': label, 'icon': icon};
                };
                var gen_add:Object = con_row('Add New', add_icon);
                var gen_add_what:Function = function(what:String):Object { return con_row('Add New ' + what, add_icon); };
                var gen_drop:Object = con_row('Drop', drop_icon);
                    
                register_context("schemas", [con_row('Add New', add_schema_icon)],
                    handler_wrapper(popup_new, [NewSchemaWindow])
                );
                register_context("schema", [gen_drop,
                    con_row('Drop Cascade', drop_icon),
                    /*con_row('Analyze All Tables In Schema', null),*/
                    con_row('Generate DDL Statement', ddl_icon)],
                    function (index:Number, context:ObjectTree) : void {
                        if (index == 0 || index == 1) {
                            var casc:Boolean = (index == 1);
                            drop_remove_item('SCHEMA "' + context.model.currentcatalogname + '"."' +
                                context.selectedItem.@label + '"', casc, 'Are you sure you want to\n' +
                                'drop this schema?', 'Schema sucessfully dropped.', context,
                                context.selectedItem as XML);
                        } else if (index == 2) { // change to 3 later
                            var gen:GeneralServiceEvent = new GeneralServiceEvent(GenerateDdlCommand,
                                'getSchemaDdl', {'catalog' : model.currentcatalogname, 
                                    'schema': context.selectedItem.@label}); 
                            CairngormEventDispatcher.getInstance().dispatchEvent(gen);
                        }
                    }
                );
                register_context("tables", [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        var win:CreateEditTableWindow = FlexGlobals.topLevelApplication.addTab('New Table',
                            CreateEditTableWindow);
                        callLater(win.select_schema, [context.getParentItem(context.selectedItem).@label]);
                    }
                );
                register_context('table', [con_row('Script as Select', selecticon),
                    con_row('Script as Insert', inserticon),
                    con_row('Script as Update', updateicon),
                    con_row('Script as Delete', deleteicon),
                    {type: 'separator'},
                    con_row('Open', opentableicon),
                    gen_drop,
                    con_row('Edit', updateicon),
                    {type: 'separator'},
                    con_row('Create Indexes', indexicon)
                    //con_row('Storage Report', null),
                    //con_row('Analyze Table', null)
                    ],
                    function (index:Number, context:ObjectTree) : void {
                        var query:String = ''
                        var schema:String = get_schema(context);
                        if (index == 0) {
                            script_as_query(context);
                        } else if (index == 1) {
                            query = "INSERT INTO " + "\"" + context.model.currentcatalogname + "\".\"" + 
                            get_schema(context) + 
                            "\".\"" + context.selectedItem.@label + "\"" + " \r(\r";
                            query += get_column_names(context);
                            query += "\r)\r VALUES\r (\r";
                            /*for (x = 0; x < context.selectedItem.children().length(); x++){
                                query += "{" + context.selectedItem.column[x].@label + "}";
                                if (x + 1 < context.selectedItem.children().length())
                                    query += ", \r";
                            }*/
                            query += "\r)";
                        } else if (index == 2) {
                            query = "UPDATE " + "\"" + context.model.currentcatalogname + "\".\"" +
                            schema +
                            "\".\"" + context.selectedItem.@label + "\"" + " \rSET\r";
                            query += get_column_names(context, ' = { }');
                            query += "\rWHERE {SEARCH_CONDITIONS}";
                        } else if (index == 3) {
                            query = "DELETE FROM " + "\"" + context.model.currentcatalogname + "\".\"" +
                            schema +
                            "\".\"" + context.selectedItem.@label + "\"" + "\rWHERE {SEARCH_CONDITIONS}";
                        // 4 is the separator
                        } else if (index == 5) {
                            var otw:OpenTableWindow = OpenTableWindow(popup_new(OpenTableWindow));
                            otw.col_list = get_column_names(context);
                            otw.setTablename(schema + "." + context.selectedItem.@label);
                        } else if (index == 6) {
                            drop_remove_item('TABLE "' + context.model.currentcatalogname + '"."' +
                                get_schema(context) + '"."' + context.selectedItem.@label + '" ', true,
                                'Are you sure you want to\n' +
                                'drop cascade this table?', 'Table Dropped Successfully', context,
                                context.selectedItem as XML);
                        } else if (index == 7) {
                            FlexGlobals.topLevelApplication.addTab("Edit Table " + context.selectedItem.@label,
                                CreateEditTableWindow, context.ETimg)
                            // Grab the table data.
                            var td_event:TableDetailsEvent = new TableDetailsEvent(model.currentcatalogname,
                                schema, context.selectedItem.@label, ActionEnum.GET);
                            CairngormEventDispatcher.getInstance().dispatchEvent(td_event);
                        // 8 is sep
                        } else if (index == 9) {
                           var iw:IndexesWindow = IndexesWindow(popup_new(IndexesWindow));
                           iw.schema = get_schema(context);
                           iw.table = context.selectedItem.@label;
                        } else if (index == 10) {
                            
                        }

                        if (query.length > 0) {
                            script_query(query, schema);                            
                        }
                    }
                );
                register_context('column', [/*con_row('Data Stats', null)*/],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('views', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        var vw:ViewWindow = ViewWindow(FlexGlobals.topLevelApplication.addTab('New View', ViewWindow));
                        callLater(vw.guess_schema, [context.getParentItem(context.selectedItem).@label]);
                    }
                );
                register_context('view', [gen_drop,
                    con_row('Edit', updateicon),
                    con_row('Select As', selecticon)].reverse(), // sorry!
                    function (index:Number, context:ObjectTree) : void {
                        if (index == 2) {
                            drop_remove_item('VIEW "' + context.model.currentcatalogname + '"."' +
                                get_schema(context) + '"."' + context.selectedItem.@label + '" ', true,
                                'Are you sure you want to\n' +
                                'drop cascade this view?', 'View Dropped Successfully', context,
                                context.selectedItem as XML);
                        } else if (index == 1) {
                            var loadCrap:Function = function(querydata:XML):void {
                                var schema:String = querydata.NewDataSet.Table.SCHEMA_NAME;
                                var view:String = querydata.NewDataSet.Table.VIEW_NAME;
                                var desc:String = querydata.NewDataSet.Table.REMARKS;
                                var create_date:String = querydata.NewDataSet.Table.CREATION_TIMESTAMP;
                                var text:String = querydata.NewDataSet.Table.ORIGINAL_TEXT;
                                
                                var vw:ViewWindow = ViewWindow(FlexGlobals.topLevelApplication.addTab("Edit View " +
                                    view, ViewWindow, VWedImg));
                                vw.setText(text);
                                vw.editing = true;
                                vw.view_name.text = view;
                                vw.view_desc.text = desc;
                                callLater(vw.guess_schema, [schema]);
                            };
                            var query : String = 'SELECT SCHEMA_NAME, VIEW_NAME,' +
                            ' REMARKS, ' +
                            ' CREATION_TIMESTAMP, ORIGINAL_TEXT' +
                            ' FROM "LOCALDB"."SYS_ROOT"."DBA_VIEWS" WHERE ' +
                            "SCHEMA_NAME = '" + get_schema(context) + "' AND " +
                            "VIEW_NAME = '" + context.selectedItem.@label + "'";
                            var sqlevent:ExecuteSQLEvent = new ExecuteSQLEvent(query, "special", loadCrap);
                            CairngormEventDispatcher.getInstance().dispatchEvent(sqlevent);             
                        } else if (index == 0) {
                            script_as_query(context);
                        }
                    }
                );
                register_context('foreign_tables', [/*con_row('Import', null)*/],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('foreign_table', [con_row('Select As', selecticon),
                    con_row('Copy Locally', import_foreign_icon),
                    gen_drop],
                    function (index:Number, context:ObjectTree) : void {
                        if (index == 0) {
                            script_as_query(context);
                        } else if (index == 1) {
                            var ftiw:ForeignTableImportWindow = ForeignTableImportWindow(popup_new(
                                ForeignTableImportWindow));
                            ftiw.schema = get_schema(context);
                            ftiw.foreign_table = context.selectedItem.@label;
                            ftiw.to_table = 'local_' + ftiw.foreign_table;
                        } else if (index == 2) {
                            drop_remove_item('FOREIGN TABLE "' + context.model.currentcatalogname + '"."' +
                                get_schema(context) + '"."' + context.selectedItem.@label + '" ', true,
                                'Are you sure you want to\n' +
                                'drop cascade this foreign table?', 'Foreign Table Dropped Successfully', context,
                                context.selectedItem as XML);
                        }
                    }
                );
                register_context('functions', [/*gen_add*/],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('function', [/*gen_drop,
                    con_row('View Details', null)*/],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('procedures', [/*gen_add*/],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('procedure', [/*con_row('View Details', null)*/],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                // None for security?
                register_context('users', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        UsersAndRolesWindow(FlexGlobals.topLevelApplication.addTab('Users',
                                                            UsersAndRolesWindow)).currentState = 'users';
                    }
                );
                register_context('user', [con_row('Edit', edit_user_icon),
                    gen_drop],
                    function (index:Number, context:ObjectTree) : void {
                        if (index == 0) {
                            var urw:UsersAndRolesWindow = UsersAndRolesWindow(
                                FlexGlobals.topLevelApplication.addTab('Users', UsersAndRolesWindow));
                            urw.currentState = 'users';
                            callLater(urw.set_user_mode, ['edit', context.selectedItem.@label]);
                        } else if (index == 1) {
                            drop_remove_item('USER "' + context.selectedItem.@label + '" ', false,
                                'Are you sure you want to\n' +
                                'drop this user?', 'User Dropped Successfully', context,
                                context.selectedItem as XML);
                        }
                    }
                );
                register_context('roles', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        UsersAndRolesWindow(FlexGlobals.topLevelApplication.addTab(
                                            'Roles', UsersAndRolesWindow)).currentState = 'roles';
                    }
                );
                register_context('role', [con_row('Edit', edit_user_icon),
                    gen_drop],
                    function (index:Number, context:ObjectTree) : void {
                        if (index == 0) {
                            var urwr:UsersAndRolesWindow = UsersAndRolesWindow(
                                FlexGlobals.topLevelApplication.addTab('Roles', UsersAndRolesWindow));
                            urwr.currentState = 'roles';
                            urwr.set_role_mode('edit', context.selectedItem.@label);
                        } else if (index == 1) {
                            drop_remove_item('ROLE "' + context.selectedItem.@label + '" ', false,
                                'Are you sure you want to\n' +
                                'drop this role?', 'Role Dropped Successfully', context,
                                context.selectedItem as XML);
                        }
                    }
                );
                // aka foreign data wrappers:
                register_context('remote_data', [/*gen_add*/],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('wrapper', [gen_add_what('Server')/*
                    con_row('View Details', null)*/],
                    function (index:Number, context:ObjectTree) : void {
                        if (index == 0) {
                            var wiz:ForeignDataWizard = FlexGlobals.topLevelApplication.addTab('New Foreign Data Server', ForeignDataWizard); 
                            callLater(wiz.set_wrapper, [context.selectedItem.@label]);
                            callLater(wiz.show_options);
                        }
                    }
                );
                register_context('servers', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        var wiz:ForeignDataWizard = FlexGlobals.topLevelApplication.addTab('New Foreign Data Server', ForeignDataWizard); 
                        callLater(wiz.set_wrapper, [context.getParentItem(context.selectedItem).@label]);
                        callLater(wiz.show_options);
                    }
                );
                register_context('server', [gen_drop,
                    con_row('Edit', server_edit_icon),
                    con_row('Import Objects', import_foreign_icon),
                    con_row('Verify Connection', server_verify_icon)],
                    function (index:Number, context:ObjectTree) : void {
                        if (index == 0) {
                            drop_remove_item('SERVER "' + context.selectedItem.@label + '" ', true,
                                'Are you sure you want to\n' +
                                'drop cascade this foreign server?', 'Server Dropped Successfully', context,
                                context.selectedItem as XML);
                        } else if (index == 1) {
                            var wiz:ForeignDataWizard = FlexGlobals.topLevelApplication.addTab('Edit Foreign Data Server', ForeignDataWizard);
                            callLater(function():void {
                                wiz.set_wrapper(context.getParentItem(context.getParentItem(context.selectedItem)).@label);
                                wiz.show_options();
                                wiz.load_prior_values(context.selectedItem.@label);
                            });
                        } else if (index == 2) {
                            var importer:ForeignDataImporter = FlexGlobals.topLevelApplication.addTab('Import Foreign Objects', ForeignDataImporter, import_foreign_icon);
                            importer.foreign_server = context.selectedItem.@label;
                            importer.init();
                        } else if (index == 3) {
                            var ver_event:GeneralServiceEvent = new GeneralServiceEvent(ForeignDataCommand,
                                'testServer', {'server_name': context.selectedItem.@label},
                                {'callback': function(r:*) : void {
                                    if (String(r) == '')
                                        Alert.show('Connection Made', 'Success');
                                    else
                                        Alert.show('Connection failed: ' + String(r), 'Failure');
                                }}
                            );
                            CairngormEventDispatcher.getInstance().dispatchEvent(ver_event);
                        }
                    }
                );
                register_context('jars', [/*gen_add*/],
                    handler_wrapper(popup_new, [NewJarWindow])
                );
                register_context('jar', [/*gen_drop*/],
                    function (index:Number, context:ObjectTree) : void {
                        /* To implement: call remove_jar with our parent as the schema. */
                        drop_remove_item('JAR "' + context.selectedItem.@label + '" ', true,
                            'Are you sure you want to\n' +
                            'drop this jar?', 'Jar dropped successfully. (Your LucidDB server may need' +
                            'to be restarted.)', context,
                            context.selectedItem as XML);
                    }
                );
                register_context('counters', [con_row('Performance Monitor', counters_icon)],
                    function (index:Number, context:ObjectTree) : void {
                        FlexGlobals.topLevelApplication.addTab('Performance Monitor', PerformanceMonitor, counters_icon);
                    }
                );
                register_context('configuration', [/*con_row('Edit', null)*/],
                    function (index:Number, context:ObjectTree) : void {
                            
                    }
                );
                register_context('sessions', [con_row('View Active Sessions', sessions_icon)],
                    function (index:Number, context:ObjectTree) : void {
                        if (model.session_tab == null) {
                            FlexGlobals.topLevelApplication.addTab("Active Sessions", SessionsWindow, sessions_icon);
                        } else {
                            model.main_tabnav.selectedChild = INavigatorContent(model.session_tab.parent);
                        }
                    }
                );
                    
            }
        ]]>
    </mx:Script>
    
</mx:Tree>
