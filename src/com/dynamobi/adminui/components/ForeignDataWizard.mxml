<?xml version="1.0" encoding="utf-8"?>
<!--
Dynamo Admin UI is a web service project for administering LucidDB
Copyright (C) 2010 Dynamo Business Intelligence Corporation

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version approved by Dynamo Business Intelligence Corporation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   creationComplete="init();"
                   width="100%" height="100%" xmlns:components="com.dynamobi.adminui.components.*"
                   >
    <s:layout>
        <s:VerticalLayout paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="10" />
    </s:layout>
    <fx:Declarations>
        <s:RadioButtonGroup id="suggestions" />
    </fx:Declarations>
    <s:states>
        <s:State name="define_wrapper" />
        <s:State name="define_options" />
        <s:State name="load_foreign_objects" />
    </s:states>
    
    <s:HGroup includeIn="load_foreign_objects" height="100%" width="100%">
        <components:ForeignDataImporter id="importer" foreign_server="{server_name}" />
    </s:HGroup>
    
    <s:HGroup includeIn="define_wrapper">
        <s:Label text="Select Wrapper: " />
        <mx:ComboBox id="wrappers_list"
                     dataProvider="{ObjectTree(model.object_tree).tree_data.remote_data.children()}"
                     labelField="@label"
                     />
        <s:Button click="show_options();" label="Next" />
    </s:HGroup>
    
    <s:HGroup includeIn="define_options">
        <s:Label text="Server Name: " left="10" top="10" />
        <s:TextInput id="server_name" />
        <s:Button label="Save Server" click="create_server();" />
        <s:HGroup id="driver_suggestions" visible="false">
            <s:Label text="Driver Suggestions: " />
            <s:RadioButton label="MySQL" groupName="suggestions"
                           click="suggest_driver('com.mysql.jdbc.Driver', 'jdbc:mysql://'); add_mysql();" />
            <s:RadioButton label="PostgreSQL" groupName="suggestions"
                           click="suggest_driver('org.postgresql.Driver', 'jdbc:postgressql://');" />
            <s:RadioButton label="Hypersonic" groupName="suggestions"
                           click="suggest_driver('org.hsqldb.jdbcDriver', 'jdbc:hsqldb://');" />
            <s:RadioButton label="CSVJDBC" groupName="suggestions"
                           click="suggest_driver('org.relique.jdbc.csv.CsvDriver', 'jdbc:relique:csv://');" />
        </s:HGroup>
    </s:HGroup>
    <s:VGroup includeIn="define_options" itemCreationPolicy="immediate" width="100%" height="100%">
        <mx:AdvancedDataGrid id="options_grid" rowCount="5" dataProvider="{wrapper_options}"
                             width="100%" height="100%"  bottom="10" left="10" right="10">
            <mx:columns>
                <mx:AdvancedDataGridColumn id="op_send" headerText="Send Value" rendererIsEditor="true"
                                           dataField="send">
                    <mx:itemRenderer>
                        <fx:Component>
                            <mx:CheckBox click="data.send = !data.send"
                                         updateComplete="{selected = data &amp;&amp; data.send;
                                         enabled = data &amp;&amp; data.required == 'false'}"
                                      />
                        </fx:Component>
                    </mx:itemRenderer>
                </mx:AdvancedDataGridColumn>
                <mx:AdvancedDataGridColumn id="op_name" headerText="Option Name" dataField="shown_name" />
                                   <!--rendererIsEditor="true" itemRenderer="mx.controls.TextInput" />-->
                <mx:AdvancedDataGridColumn id="op_value" headerText="Option Value" dataField="value"
                                           rendererIsEditor="true">
                    <mx:itemRenderer>
                        <fx:Component>
                            <mx:VBox>
                                <fx:Script>
                                    <![CDATA[
                                        import mx.collections.ArrayList;
                                        import mx.controls.CheckBox;
                                        import mx.controls.TextInput;
                                        
                                        import spark.components.DropDownList;
                                        import spark.events.DropDownEvent;
                                        
                                        override public function set data(value:Object) : void {
                                            super.data = value;
                                            this.removeAllChildren();

                                            if (value == null) {
                                                //this.addChild(new CheckBox());
                                                return;
                                            }
                                            if (value.type != 'BOOLEAN') {
                                                var input:TextInput = new TextInput();
                                                input.percentWidth = 100;
                                                input.percentHeight = 100;
                                                if (value.value != "")
                                                    input.text = value.value;
                                                else
                                                    input.text = value.default_value;
  
                                                input.addEventListener(Event.CHANGE,
                                                    function(event:Event=null):void {
                                                        value.value = event.currentTarget.text;
                                                        // value.send = true;
                                                        // Having this bind to the text input
                                                        // can work by using ObjectProxy(),
                                                        // but mysteriously the textinput
                                                        // loses focus after this event...
                                                    }
                                                );
                                                this.addChild(input);
                                            } else {
                                                var dropdown:DropDownList = new DropDownList();
                                                dropdown.dataProvider = new ArrayList(['true', 'false']);
                                                dropdown.percentWidth = 100;
                                                dropdown.percentHeight = 100;
                                                if (value.value == "")
                                                    dropdown.selectedIndex = (value.default_value.toUpperCase() == 'TRUE') ? 0 : 1;
                                                else
                                                    dropdown.selectedIndex = (value.value.toLowerCase() == 'true') ? 0 : 1;
                                                dropdown.addEventListener(Event.CHANGE,
                                                    function(event:Event=null): void {
                                                        value.value = event.currentTarget.selectedItem;
                                                    }
                                                );
                                                dropdown.addEventListener(DropDownEvent.CLOSE,
                                                    function (event:Event=null) : void {
                                                        if (value.shown_name == 'EXTENDED_OPTIONS' &&
                                                            value.value == 'true') {
                                                            outerDocument.fetch_extended_options();
                                                        }
                                                    }
                                                );
                                                this.addChild(dropdown);
                                            }
                                        }
                                    ]]>
                                </fx:Script>
                            </mx:VBox>
                       </fx:Component>
                    </mx:itemRenderer>
                </mx:AdvancedDataGridColumn>
                    <!--itemRenderer="mx.controls.TextInput" />-->
                <mx:AdvancedDataGridColumn id="op_required" headerText="Required" dataField="required" />
                <mx:AdvancedDataGridColumn id="op_desc" headerText="Description" dataField="desc"
                                           showDataTips="true" />
            </mx:columns>
        </mx:AdvancedDataGrid>
    </s:VGroup>
    
    <fx:Script>
        <![CDATA[
            import mx.utils.ObjectProxy;
            import mx.controls.CheckBox;
            import mx.controls.Alert;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.dynamobi.adminui.commands.ForeignDataCommand;
            import com.dynamobi.adminui.events.GeneralServiceEvent;
            import com.dynamobi.adminui.events.PerformanceEvent;
            import com.dynamobi.adminui.model.ModelLocator;
            import com.dynamobi.adminui.utils.CustomFuncs;
            
            [Bindable]
            private var model:ModelLocator = ModelLocator.getInstance();
            
            [Bindable]
            private var wrapper_options:Array = [];
            
            [Bindable]
            private var wrappers:XMLList = new XMLList();
            
            private var editing_server:String = "";
            
            private var extended_start:Number = -1;
            
            public function init() : void {
                //for (var i:Number = 0; i < options_grid.rowCount; i++)
                //    add_option();
                
                if (ObjectTree(model.object_tree).tree_data.remote_data.children().length() == 0) {
                    ObjectTree(model.object_tree).expandItem(model.object_tree.tree_data..remote_data[0], true, false);
                    ObjectTree(model.object_tree).expandItem(model.object_tree.tree_data..remote_data[0], false, false);

                }
            }
            
            public function set_wrapper(name:String) : void {
                for (var i:Number = 0; i < wrappers_list.dataProvider.length; i++) {
                    if (wrappers_list.dataProvider[i].@label == name) {
                        wrappers_list.selectedIndex = i;
                        break;
                    }
                }
            }
            
            public function show_options() : void {
                currentState = 'define_options';
                var get_opts_event:GeneralServiceEvent = new GeneralServiceEvent(ForeignDataCommand,
                    'getWrapperOptions', {'wrapper': wrappers_list.selectedLabel},
                    {'callback': load_options}
                );
                CairngormEventDispatcher.getInstance().dispatchEvent(get_opts_event);
                op_send.width = measureText(CustomFuncs.wordMult("W", 8)).width;
                op_value.width = measureText(CustomFuncs.wordMult("W", 8)).width;
                op_required.width = measureText(CustomFuncs.wordMult("W", 8)).width;

            }
            
            public function load_options(r:*) : void {
                var results:XML = XML(r);
                for each (var el:XML in results['return'].children()) {
                    wrapper_options.push({'name': '"' + el.@name + '"', 'default_value': el.@value,
                        'value': el.@value, 'shown_name': el.@name, 'send': (el.@required == 'true'),
                        'required': el.@required, 'desc': el.@desc, 'type': el.@type});
                }
                options_grid.dataProvider = wrapper_options;
                
                // Wrapper-specific behavior:
                if (wrappers_list.selectedLabel == "SYS_JDBC")
                    driver_suggestions.visible = true;
            }
            
            public function suggest_driver(driver:String, url:String) : void {
                var done_d:Boolean = false;
                var done_u:Boolean = false;
                wrapper_options.every(function(item:*, index:int, array:Array) : Boolean {
                    if (Object(item)['shown_name'] == 'DRIVER_CLASS') {
                        Object(item)['value'] = driver;
                        done_d = true;
                    } else if (Object(item)['shown_name'] == 'URL') {
                        Object(item)['value'] = url;
                        done_u = true;
                    }
                    if (done_d && done_u) return false;
                    else return true;
                });
                options_grid.dataProvider = wrapper_options;
                if (extended_start != -1) { // need to reload ex ops
                    fetch_extended_options();
                }
            }
            
            public function add_mysql() : void {
                load_prior_result(<vals><return><el name="SCHEMA_NAME" value=""
desc="Lets importer know the database name of tables, strongly suggested." type="STRING" />
                    <el name="useCursorFetch" value="true"
desc="If connected to MySQL &gt; 5.0.2, and setFetchSize() &gt; 0 on a statement, should that statement use cursor-based fetching to retrieve rows?" type="BOOLEAN" />
</return></vals>);
            }
            
            public function load_prior_values(server:String) : void {
                if (server_name == null) {
                    callLater(load_prior_values, [server]);
                    return;
                }
                editing_server = server;
                server_name.text = server;
                var op_event:GeneralServiceEvent = new GeneralServiceEvent(ForeignDataCommand,
                    'getWrapperOptionsForServer', {'server': server}, {'callback': load_prior_result});
                CairngormEventDispatcher.getInstance().dispatchEvent(op_event);
            }
            
            public function load_prior_result(r:*) : void {
                var results:XML = XML(r);
                for each (var el:XML in results['return'].children()) {
                    var found:Boolean = false;
                    wrapper_options.every(function(item:*, index:int, array:Array) : Boolean {
                        if (Object(item)['name'] == '"' + el.@name + '"') {
                            Object(item)['value'] = el.@value;
                            Object(item)['send'] = true;
                            found = true;
                            return false;
                        } else {
                            return true;
                        }
                    });
                    if (!found) {
                        wrapper_options.push({'name': '"' + el.@name + '"', 'default_value': el.@value,
                            'value': el.@value, 'shown_name': el.@name,
                            'send': true,
                            'required': 'false'
                            , 'desc': el.@desc, 'type': el.@type});
                    }
                }
                options_grid.dataProvider = wrapper_options;
                options_grid.invalidateDisplayList();
            }
            
            public function create_server() : void {
                var options:Array = [];
                for each (var option:Object in wrapper_options) {
                    if (option.send)
                        options.push(option);
                }
                var cs_event:GeneralServiceEvent = new GeneralServiceEvent(ForeignDataCommand,
                    'createServer', {'server_name': server_name.text,
                        'wrapper_name': wrappers_list.selectedLabel,
                        'options': options}, {'callback': check_server_creation}
                );
                CairngormEventDispatcher.getInstance().dispatchEvent(cs_event);
            }
            
            public function check_server_creation(r:*) : void {
                var response:String = String(r);
                if (response == "") {
                    Alert.show("Foreign Server Saved", "Success");
                    if (editing_server != server_name.text) {
                        model.object_tree.addItem('server', server_name.text.toUpperCase(),
                        'remote_data', 'wrapper@', wrappers_list.selectedLabel, 'servers');
                        currentState = 'load_foreign_objects';
                        importer.foreign_server = server_name.text.toUpperCase();
                        importer.init();
                    }
                } else {
                    Alert.show("Could not create foreign server: " + response, "Error");
                }
            }
            
            public function fetch_extended_options() : void {
                var driver_class:String = '';
                for each (var el:Object in wrapper_options) {
                    if (el.shown_name == 'DRIVER_CLASS') {
                        if (el.value != '') {
                            driver_class = el.value;
                        }
                        break;
                    }
                }
                if (driver_class == '') {
                    Alert.show("Please specify a driver", "Error");
                    return;
                }

                var ex_event:GeneralServiceEvent = new GeneralServiceEvent(ForeignDataCommand,
                    'getExtendedWrapperOptions', {'wrapper': wrappers_list.selectedLabel,
                        'driver': driver_class}, {'callback': load_extended_options}
                );
                CairngormEventDispatcher.getInstance().dispatchEvent(ex_event);
            }
            
            public function load_extended_options(r:*) : void {
                var results:XML = XML(r);
                if (extended_start != -1) { // remove any existing ones
                    wrapper_options = wrapper_options.slice(0, extended_start);
                    options_grid.dataProvider = wrapper_options;
                    options_grid.invalidateDisplayList();
                    extended_start = -1;
                }
                extended_start = wrapper_options.length;
                for each (var el:XML in results['return'].children()) {
                    if (Number(el.@ordinal) < wrapper_options.length) {
                        continue;
                    }
                    wrapper_options.push({'name': '"' + el.@name + '"', 'default_value': el.@value,
                        'value': el.@value, 'shown_name': el.@name,
                        'send': (el.@required == 'true' && el.is_extended == 'false' ),
                        'required': (el.@required  == 'true' && !el.is_extended == 'false') ? 'true' : 'false'
                        , 'desc': el.@desc, 'type': el.@type});
                }
                options_grid.dataProvider = wrapper_options;
                options_grid.invalidateDisplayList();
            }
            
        ]]>
    </fx:Script>
</s:Group>
