<?xml version="1.0" encoding="utf-8"?>
<!--
Dynamo Admin UI is a web service project for administering LucidDB
Copyright (C) 2010 Dynamo Business Intelligence Corporation

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version approved by Dynamo Business Intelligence Corporation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
-->
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:components="com.dynamobi.adminui.components.*"
	width="100%"
	height="100%"
	icon="@Embed(source='/icons/script_select.png')" 
	keyUp="handleShortcuts(event);"
	creationComplete="init();">
	
    <!-- Submit Query, Checkbox (for explain plan), Clear Query, etc. -->
  <mx:HBox width="100%" left="10" right="10" id="window_actions">
      <mx:Button click="submitQuery();" toolTip="(F5) Submit Query" label="Submit Query" icon="@Embed(source='/icons/exec.gif')" id="btnQuery" />
      <mx:Button click="clearQuery();" icon="@Embed(source='/icons/clear.png')" toolTip="(F6) Clear Query" label="Clear Query" />
      <mx:Button click="submitShowPlanQuery();" icon="@Embed(source='/icons/exec_plan.png')" label="Show Execution Plan" toolTip="Show Execution Plan"/>
      <!--<mx:CheckBox label="Include Execution Plan" id="spflag"/>-->
      <mx:Button click="makeView();" label="Make View From Query" toolTip="Make View From Query" icon="{VWimg}" />
  </mx:HBox>

    <mx:HBox width="100%" left="10" right="10" id="view_info" visible="false">
        <mx:Form>
            <mx:FormItem label="Catalog">
                <mx:Label text="{model.currentcatalogname}" />
            </mx:FormItem>
            <mx:FormItem label="Schema">
                <mx:ComboBox id="view_schema" dataProvider="{model.metadata.schemas.children()}"
                             labelField="@label" />
                <mx:Button click="newSchema();" label="New Schema"
                           icon="@Embed(source='/icons/database_add.png')" />
            </mx:FormItem>
        </mx:Form>
        <mx:Form>
            <mx:FormItem label="View Name">
                <mx:TextInput id="view_name" />                
            </mx:FormItem>
            <mx:FormItem label="View Description (optional)">
                <mx:TextInput id="view_desc" />
            </mx:FormItem>
            <mx:FormItem>
                <mx:HBox>
                <mx:Button id="makeview_btn" click="makeView();" label="Create View" icon="@Embed(source='/icons/exec.gif')" />
                <mx:Button click="submitQuery();" toolTip="(F5) Preview Results" label="Preview Results" icon="@Embed(source='/icons/exec.gif')" />
                </mx:HBox>
            </mx:FormItem>
        </mx:Form>
    </mx:HBox>

	<mx:TextArea id="querytext" 
		dragEnter="doDragEnter(event);" 
		dragDrop="doDragDrop(event);"
        keyDown="spaceCheck(event);"
		keyUp="parseQuery(event);" height="40%" left="10" top="30" right="10" />
		
	<mx:Box width="100%" height="50%" left="10" right="10" bottom="10" id="tabresults_holder">
		<mx:TabNavigator id="tabresults" width="100%" height="100%">
			<mx:Canvas width="100%" height="100%" label="Result" icon="@Embed(source='/icons/result.png')">
				<mx:AdvancedDataGrid id="querydatagrid" dataProvider="{result_info.querydata}"
                             width="100%" height="100%" horizontalScrollPolicy="auto" editable="true"
                             x="0" y="0" creationComplete="datagrid_norm();"
                             rollOut="datagrid_switch(0);" itemClick="datagrid_switch(1);">
                </mx:AdvancedDataGrid>
			</mx:Canvas>
			<mx:Canvas id="messages" label="Messages" icon="@Embed(source='/icons/messages.png')">
				<mx:TextArea text="{result_info.querymessages}" width="100%" height="100%" wordWrap="false" horizontalScrollPolicy="auto" editable="false"/>
			</mx:Canvas>
			<components:ExecutionPlanWindow width="100%" height="100%" id="showplanwin" label="Execution Plan" icon="@Embed(source='/icons/exec_plan.png')"/>
			<mx:Canvas id="history" label="History" icon="@Embed(source='/icons/history.png')">
				<mx:TextArea htmlText="{result_info.queryHistoryVO.history}" width="100%" height="100%" wordWrap="false" horizontalScrollPolicy="auto" editable="false" id="txtHistory"/>
			</mx:Canvas>
            <mx:Canvas id="rawtext" label="Raw Result" icon="@Embed(source='/icons/page_white_text.png')"
                       render="changeraw()"
                       >
                <mx:VBox width="100%" height="100%">
                <mx:HBox>
                    <mx:Label paddingLeft="5" text="Output format: " />
                    <mx:RadioButtonGroup id="display_type" change="changeraw()" />
                    <mx:RadioButton groupName="display_type" value="xml" label="XML" selected="true" />
                    <mx:RadioButton groupName="display_type" value="vertical" label="Vertical" />
                    <mx:RadioButton groupName="display_type" value="csv" label="CSV" />
                </mx:HBox>
                <mx:TextArea id="rawtextvalue" text="{result_info.querydata.toXMLString()}"
                             width="100%" height="100%" fontFamily="monospace"
                             wordWrap="true" editable="true" />
                </mx:VBox>
            </mx:Canvas>
		</mx:TabNavigator>
	</mx:Box>
	
	<mx:Script>
		<![CDATA[
            import com.adobe.cairngorm.business.ServiceLocator;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.dynamobi.adminui.components.DebugWindow;
            import com.dynamobi.adminui.events.ExecuteSQLEvent;
            import com.dynamobi.adminui.model.ModelLocator;
            import com.dynamobi.adminui.utils.CustomFuncs;
            import com.dynamobi.adminui.vo.QueryHistoryVO;
            import com.dynamobi.adminui.vo.QueryResultInfo;
            
            import mx.controls.Alert;
            import mx.controls.ComboBox;
            import mx.controls.Label;
            import mx.controls.Text;
            import mx.controls.TextInput;
            import mx.core.FlexGlobals;
            import mx.events.DragEvent;
            import mx.events.ListEvent;
            import mx.managers.DragManager;
            import mx.managers.PopUpManager;

			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			[Bindable]
			public var result_info : QueryResultInfo;
            
            public var guessed_schema : String; // this is populated when a 'script as' or similar
            // query is executed.
			
            [Bindable]
            [Embed("/icons/script_add.png")]
            public var VWimg:Class;
            
			public function init() : void {
				querytext.percentWidth = 100;
				querytext.setFocus();

                result_info = new QueryResultInfo();
				result_info.queryHistoryVO = new QueryHistoryVO();
				result_info.showplanwindow = showplanwin;
				result_info.querydatagrid = querydatagrid;

			}
            
            private var datagrid_renderer:IFactory;
            private function datagrid_norm() : void {
                datagrid_renderer = querydatagrid.itemRenderer;
            }
            private function datagrid_switch(i:Number) : void {
                if (i == 1 && querydatagrid.itemRenderer == datagrid_renderer)
                    querydatagrid.itemRenderer = new ClassFactory(TextInput);
                else if (i == 0 && querydatagrid.itemRenderer != datagrid_renderer)
                    querydatagrid.itemRenderer = datagrid_renderer;
            }
						
			public function handleShortcuts(e:KeyboardEvent) : void {
				if(e.keyCode == 116) // F5
					submitQuery();
				else if (e.keyCode == 117) // F6
					clearQuery();
				/*else if(e.keyCode == 9) { // tab
					var spacer:String = "\t";
					var cutter:int = 0;
					var tempquery:TextArea = querytext;
					if(tempquery.text.charCodeAt(tempquery.selectionBeginIndex - 1) == 13 || tempquery.selectionBeginIndex == 0)
						spacer = " \t";
					if (! e.shiftKey){
						tempquery.text = tempquery.text.substring(0, tempquery.selectionBeginIndex) + spacer + tempquery.text.substring(tempquery.selectionBeginIndex, tempquery.length);
						tempquery.setSelection(tempquery.selectionBeginIndex + spacer.length, tempquery.selectionBeginIndex + spacer.length);	
					} else {
						if (tempquery.selectionBeginIndex > 0 && tempquery.text.charCodeAt(tempquery.selectionBeginIndex - 1) == 9){
							tempquery.text = tempquery.text.substring(0, tempquery.selectionBeginIndex - 1) + tempquery.text.substring(tempquery.selectionBeginIndex, tempquery.length);
							tempquery.setSelection(tempquery.selectionBeginIndex - 1, tempquery.selectionBeginIndex - 1);
						}
					}
					tempquery.setFocus();
					parseQuery(new KeyboardEvent(""));
				}*/
			}
			
			public function setLabel(s:String):void{
				this.label = s;
			}
			
			public function setText(s:String):void{
				DebugWindow.log("QueryWindow.mxml:setText(" + s + ")");
				querytext.text = querytext.text + s;
				parseQuery(new KeyboardEvent(""));
			}
			
			public function getQueryText():String{
				/*if (querytext.selectionBeginIndex != querytext.selectionEndIndex)
                    return querytext.text.substring(querytext.selectionBeginIndex, querytext.selectionEndIndex);
                else
                */
                return querytext.text;
			}
            
            public function isEmpty():Boolean {
                return querytext.text == "";
            }
			
			public function resetSelection():void{
            	querytext.selectionBeginIndex = querytext.text.length;
            	querytext.selectionEndIndex = querytext.text.length;
			}
			
			public function clearQuery():void{
				querytext.text = "";
			}
			
			public function parseQuery(e:KeyboardEvent):void{
				if (querytext.text != null && e.keyCode != 116){
	                var pattern:RegExp = /\b(add|call|column|modify|truncate|create|schema|table|view|procedure|alter|drop|is|null|not|with|rollup|cube|as|union|all|top|on|like|cross|asc|desc|right|left|set|values|insert|into|update|delete|select|from|where|order|by|inner|outer|join|exec|group|having|and|or|execute)\b/gi;
	                var aggpattern:RegExp = /\b(count|avg|sum|max|min)\b/gi;
	                var regexNewLine:RegExp = /\r/g;
	                var lt:RegExp = /</g;
	                var tempQueryString:String = querytext.text;
	                tempQueryString = tempQueryString.replace(lt, "&lt;");
	                tempQueryString = tempQueryString.replace(pattern, "<FONT COLOR='#0000FF'><B>$1</B></FONT>");
	                tempQueryString = tempQueryString.replace(aggpattern, "<FONT COLOR='#FF33FF'><B>$1</B></FONT>");
	                tempQueryString = tempQueryString.replace(regexNewLine, "<br>");
	                querytext.htmlText = tempQueryString;
                    querytext.setFocus();
	            }
			}
            
            private function spaceCheck(e:KeyboardEvent) : void {
                if (querytext.text != null && e.shiftKey && e.keyCode == 32) {
                    // For some reason, shift+space doesn't do space...
                    querytext.text = querytext.text.substring(0, querytext.selectionBeginIndex) + ' ' +
                        querytext.text.substring(querytext.selectionBeginIndex);
                    querytext.setSelection(querytext.selectionBeginIndex+1, querytext.selectionBeginIndex+1);
                }
            }
			
			private function doDragEnter(event:DragEvent):void {
            	var dropTarget:TextArea=TextArea(event.currentTarget);
				DragManager.acceptDragDrop(dropTarget);
	        }

	        private function doDragDrop(event:DragEvent):void {
	            var dropTarget:TextArea=TextArea(event.currentTarget);       
	            var items:Array = event.dragSource.dataForFormat("treeItems") as Array;
	            var tempstr:String = items[0].@column;
	            if (tempstr.length == 0)
	            	tempstr = items[0].@label
                dropTarget.text += tempstr;
                resetSelection();
                querytext.setFocus();
                parseQuery(new KeyboardEvent(""));
	        }

            protected function submitQuery():void{
            	DebugWindow.log("main.mxml:submitQuery()");
            	DebugWindow.log("main.mxml:Query text - " + getQueryText());
            	var sqt:String = "normal";
            	//if(spflag.selected)
	            //    sqt = "spnormal";
            	var sqlevent:ExecuteSQLEvent = new ExecuteSQLEvent(getQueryText(), sqt);
            	CairngormEventDispatcher.getInstance().dispatchEvent(sqlevent);
				tabresults.selectedIndex = 0;
            }

            private function submitShowPlanQuery():void{
            	DebugWindow.log("main.mxml:submitShowPlanQuery()");
            	DebugWindow.log("main.mxml:Query text - " + getQueryText());
                var text:ExecuteSQLEvent = new ExecuteSQLEvent("explain plan for " + getQueryText(), 'normal');
                CairngormEventDispatcher.getInstance().dispatchEvent(text);
            	var sqlevent:ExecuteSQLEvent = new ExecuteSQLEvent(getQueryText(), "showplan");
            	CairngormEventDispatcher.getInstance().dispatchEvent(sqlevent);
				tabresults.selectedIndex = 2;
            }
            
            public function makeView():void {
                var text:String = getQueryText();
                if (text.substr(0, 6).toUpperCase() == "SELECT") {
                    var vw:ViewWindow = ViewWindow(FlexGlobals.topLevelApplication.addTab("Create View", ViewWindow));
                    vw.setText(getQueryText());
                    callLater(vw.guess_schema, [guessed_schema]);
                } else {
                    mx.controls.Alert.show("Only SELECT queries can be made into views.");
                }
            }
            
            public function newSchema():void {
                
            }

            public function changeraw():void {
                if (display_type == null || rawtextvalue == null || result_info == null || 
                    result_info.querydata == null)
                    return;
                var res:XMLList = result_info.querydata.source;
                if (display_type.selectedValue == 'xml')
                    rawtextvalue.text = result_info.querydata.toXMLString();
                else if (display_type.selectedValue == 'vertical') {
                    rawtextvalue.text = '';
                    var longest:Number = 0;
                    for each (var tags:XML in res[0].children()) {
                        var tag:String = tags.localName();
                        longest = (tag.length > longest) ? tag.length : longest;
                    }
                    for each (var top:XML in res) {
                        for each (tags in top.children()) {
                            tag = tags.localName();
                            rawtextvalue.text += tag + '  ';
                            if (tag.length < longest)
                                rawtextvalue.text += CustomFuncs.wordMult(' ', longest - tag.length - 1);
                            rawtextvalue.text += String(tags) + "\n";
                        }
                        rawtextvalue.text += "\n";
                    }
                } else if (display_type.selectedValue == 'csv') {
                    rawtextvalue.text = '';
                    var first:Boolean = true;
                    for each (tags in res[0].children()) {
                        if (!first)
                            rawtextvalue.text += ",";
                        else
                            first = false;
                        rawtextvalue.text += "'" + tags.localName().replace("'", "\\'") + "'";
                    }
                    for each (top in res) {
                        rawtextvalue.text += "\n";
                        first = true;
                        for each (tags in top.children()) {
                            if (!first)
                                rawtextvalue.text += ",";
                            else
                                first = false;
                            rawtextvalue.text += "'" + String(tags).replace("'", "\\'") + "'";
                        }
                    }
                }
            }
			
		]]>
	</mx:Script>
</mx:Canvas>
