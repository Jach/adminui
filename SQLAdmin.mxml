<?xml version="1.0" encoding="utf-8"?>
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:flexlib="http://code.google.com/p/flexlib/"
	xmlns:business="com.flexsqladmin.sqladmin.business.*" 
	xmlns:control="com.flexsqladmin.sqladmin.control.*"
	xmlns:components="com.flexsqladmin.sqladmin.components.*"
	layout="absolute" 
	creationComplete="init();" 
	keyUp="handleShortCuts(event);">
	
	<mx:Script> 
		<![CDATA[
			import com.adobe.cairngorm.business.ServiceLocator;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.flexsqladmin.sqladmin.components.DebugWindow;
			import com.flexsqladmin.sqladmin.components.QueryWindow;
			import com.flexsqladmin.sqladmin.events.ExecuteSQLEvent;
			import com.flexsqladmin.sqladmin.events.InitEvent;
			import com.flexsqladmin.sqladmin.events.MetaDataEvent;
			import com.flexsqladmin.sqladmin.model.ModelLocator;
			import com.flexsqladmin.sqladmin.view.AboutWindow;
			import com.flexsqladmin.sqladmin.view.LoginWindow;
			import com.flexsqladmin.sqladmin.view.OpenTableWindow;
			import com.flexsqladmin.sqladmin.vo.ConnectionVO;
			
			import flexlib.containers.SuperTabNavigator;
			import flexlib.controls.SuperTabBar;
			import flexlib.controls.tabBarClasses.SuperTab;
			
			import mx.controls.Alert;
			import mx.controls.ComboBox;
			import mx.managers.PopUpManager;
			import mx.rpc.soap.mxml.WebService;
			
			public var debug_win:DebugWindow;
			private var exectimer:Timer;
			private var DEBUG:Boolean;
			
			[Embed("/icons/close_tab.png")]
			public var closeTabImg : Class;
			[Embed("/icons/script_select.png")]
			public var QWimg : Class;
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			public function init():void{
				
				DEBUG = true;
				
				if (DEBUG) {
					//Popup Debug
					debug_win = PopUpManager.createPopUp(this, DebugWindow, false) as DebugWindow;
					DebugWindow.log("main.mxml:init()");
					debug_win.visible = false;
				}
				
				//Regiser Some Things with the model
				model.main_tabnav = tabnavigator;
				// Initial tab:
				callLater(addTab, ["Query 1", tabnavigator]);
				
				//Locate and load the wsdl page
				var urlpattern:RegExp = /SQLAdmin.swf/i; 
				var wsdl:String = "";
				try {
					// If there is a flash variables from the html page, lets use, otherwise default it to the current directory
					//            		if(Application.application.parameters.webservice == undefined || Application.application.parameters.webservice == '' ){
					//            			wsdl = this.url.replace(urlpattern, "flexsqladmin.asmx?WSDL");
					//            		} else {
					//            			wsdl = Application.application.parameters.webservice;
					//            		}
					wsdl = "http://localhost:8080/adminws/ns0.wsdl";
					//DebugWindow.log("Using WSDL location - " + wsdl);
					var s:WebService = ServiceLocator.getInstance().getService("sqlWebService") as WebService;
					s.wsdl = wsdl;
					s.loadWSDL();
				} catch (e:Error) {
					mx.controls.Alert.show("Error Loading WSDL", "WSDL Error");
				}				
				
				//Popup the login box later so it properly steals focus.
				callLater(showLogin, [true]);
				
			}
			
			private function openTable(table:String):void{
				var opentablewindow:OpenTableWindow = OpenTableWindow(PopUpManager.createPopUp(this, OpenTableWindow, true));
				opentablewindow.setStyle("borderAlpha", 0.8);
				opentablewindow.showCloseButton = true; 
				opentablewindow.setTablename(table);
			}
			
            /**
            * @param firstTime - Used for initializing first query tab and for stealing all focus
            * for the login window in subsequent times.
            * 
            */
			private function showLogin(firstTime : Boolean = false) : void {
				DebugWindow.log("main.mxml:showLogin()");
				var loginForm:LoginWindow = LoginWindow(PopUpManager.createPopUp(this, LoginWindow, !firstTime));
				loginForm.setStyle("borderAlpha", 0.8);
				loginForm.showCloseButton = true;
				if (firstTime) { // need to remove closability from initial tab at this point.
					callLater(initNonClosableTab);
				}
			}
			
			private function loadMetaData():void{
				DebugWindow.log("main.xml:loadMetaData() - Connection " + model.connectionVO.getConnectionString());
				var catalog:String = mycatalog.selectedItem.CATALOG_NAME;
				var metaevent:MetaDataEvent = new MetaDataEvent(catalog);
				CairngormEventDispatcher.getInstance().dispatchEvent(metaevent);
			}
			
			private function toggleDebugWindow():void {
				DebugWindow.log("main.xml:toggleDebugWindow()");
				if (DEBUG) {
					debug_win.visible = (debug_win.visible) ? false : true;
				}
			}
			
			private function initNonClosableTab():void {
				// I don't know why this must be called later instead of immediately.
				tabnavigator.setClosePolicyForTab(0, SuperTab.CLOSE_NEVER);
			}
			
			private function addTab(lbl:String, navigator:SuperTabNavigator,
												icon:Class=null, child_obj:String = "") : void {
				
				if(lbl=="")
					lbl = "Query " + (navigator.numChildren + 1);
				var child:VBox = new VBox();
				child.setStyle("closable", true);
				child.label = lbl;
				if(icon)
					child.icon = icon;
				else
					child.icon = QWimg;
				
				if (child_obj == "") {
					var qw:QueryWindow = new QueryWindow();
					qw.id = (navigator.numChildren + 1).toString();
					child.addChild(qw);
				}
				navigator.addChild(child);
				
				navigator.selectedIndex = navigator.numChildren - 1;
			}
			
			private function destroyTab(e : Event) : void {
				DebugWindow.log("main.mxml:destroyTabButton()");
				var index:Number = e.target.id;
				if(tabnavigator.numChildren > 1) {
					for(var c:int = index; c < model.aryQueryWindows.length; c++) {
						model.aryQueryWindows[c] = model.aryQueryWindows[c + 1];
						model.query_results[c] = model.query_results[c + 1];
					} 
					model.aryQueryWindows.pop();
					model.query_results.pop();
				} else {
					e.preventDefault();
				}
			}
			
			private function showAboutWindow():void{
				var aboutWindow:AboutWindow = AboutWindow(PopUpManager.createPopUp(this, AboutWindow, true));
				aboutWindow.setStyle("borderAlpha", 0.8);
				aboutWindow.showCloseButton = true;
			}
			
			private function handleShortCuts(e:KeyboardEvent):void{
				if (e.ctrlKey && e.keyCode == 84) // ctrl+T
					addTab("", tabnavigator);
				else if (e.ctrlKey && e.keyCode == 82) // ctrl+R
					loadMetaData();
				else if (e.ctrlKey && e.shiftKey && e.keyCode == 68)
					toggleDebugWindow();
				/*else if(e.ctrlKey && e.keyCode == 67){
					copy();
				} else if(e.ctrlKey && e.keyCode == 88){
					cut();
				} */
			}
			
			/*private function copy():void{//67
				var tempquery:TextArea = model.aryQueryWindows[tabnavigator.selectedIndex].querytext;
				System.setClipboard(tempquery.text.substring(tempquery.selectionBeginIndex, tempquery.selectionEndIndex));
			}
			
			private function cut():void{ //88
				var tempquery:TextArea = model.aryQueryWindows[tabnavigator.selectedIndex].querytext;
				System.setClipboard(tempquery.text.substring(tempquery.selectionBeginIndex, tempquery.selectionEndIndex));
				tempquery.text = tempquery.text.substring(0, tempquery.selectionBeginIndex) + tempquery.text.substring(tempquery.selectionEndIndex, tempquery.length);
				model.aryQueryWindows[tabnavigator.selectedIndex].parseQuery(new KeyboardEvent(""));
			}*/
			private function closeHandler(event:Event):void {
				
				var my:ComboBox = ComboBox(event.target);
				var metadata:MetaDataEvent = new MetaDataEvent(ComboBox(event.target).selectedItem.CATALOG_NAME);
				CairngormEventDispatcher.getInstance().dispatchEvent(metadata);
			}   
			
		]]>
	</mx:Script>
	
	<!-- the ServiceLocator where we specify the remote services -->
	<business:Services id="loginServices" />
	
	<!-- the FrontController, containing Commands specific to this appliation -->
	<control:Controller id="controller" />
	
	<mx:Style>
		Application{
			paddingLeft: 10px;
			paddingRight: 10px;
			paddingTop: 10px;
			paddingBottom: 10px;
			backgroundGradientColors: #AEC5E7, #5E8ED7;
		}
		HDividedBox{
			paddingLeft: 10px;
			paddingRight: 10px;
			paddingTop: 10px;
			paddingBottom: 10px;
		}
		TextArea {
			fontFamily: Verdana; 
			fontSize: 12pt;
		}
	</mx:Style>
    
	<mx:HDividedBox width="100%" height="100%" horizontalGap="5" liveDragging="true">
		
		<mx:VBox height="100%" width="30%" >
			<mx:HBox width="100%">
				<mx:Button click="loadMetaData();" icon="@Embed(source='icons/cog.png')" toolTip="(CTRL-R) Refresh Object Browser" label="Refresh"/>
				<mx:ComboBox id ="mycatalog" dataProvider="{model.catalogdata}" labelField="CATALOG_NAME" selectedIndex="0" close="closeHandler(event)"/>
				
			</mx:HBox>
			<components:ObjectBrowser tabnav="{tabnavigator}" dataProvider="{model.metadata}"/>
            </mx:VBox>
		
		<mx:VDividedBox width="100%" height="100%" verticalGap="5" liveDragging="true">
			
			<mx:Box width="100%" height="50%">
				<mx:HBox width="100%">
					<mx:Button click="addTab('', tabnavigator);" icon="@Embed(source='icons/add_tab.png')" toolTip="(CTRL-T) Add Query Tab" id="addtab" label="Add Query Tab" />
					<!--
					This might come out in a future release. The functionality is there, just no paste ability yet. 
					<mx:Button icon="@Embed(source='icons/cut.png')" toolTip="(CTRL-X) Cut" label="Cut" click="cut();"/>
					<mx:Button icon="@Embed(source='icons/copy.png')" toolTip="(CTRL-C) Copy" label="Copy" click="copy();"/>
					-->
					<mx:Spacer width="100%"/>
					<mx:Button click="showAboutWindow();" icon="@Embed(source='icons/information.png')" label="About" toolTip="About"/>
				</mx:HBox>
				<flexlib:SuperTabNavigator id="tabnavigator" width="100%" height="100%" alpha=".8"
										   stopScrollingEvent="{MouseEvent.MOUSE_OUT}" startScrollingEvent="{MouseEvent.MOUSE_OVER}"
										   horizontalGap="0" tabClose="destroyTab(event);"
										   closePolicy="{SuperTab.CLOSE_ALWAYS}"
										   />
				
			</mx:Box>
			<mx:HBox width="100%">
				<mx:Label fontWeight="bold" text="Elapsed Execution Time: {model.exectimer.time} sec(s)"/>
				<mx:Spacer width="100%"/>
				<mx:Button click="showLogin();" label="Reconnect" icon="@Embed(source='icons/connect.png')"/>
				<mx:Label fontWeight="bold" text="{model.connectionText}"/>
			</mx:HBox>
	
		</mx:VDividedBox>
	</mx:HDividedBox>
</mx:Application>
