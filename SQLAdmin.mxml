<!--
Copyright 2006-2010 Kevin Kazmierczak. All rights reserved.
Copyright 2010 Dynamo Business Intelligence Corporation. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY Dynamo Business Intelligence Corporation ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Dynamo Business Intelligence Corporation OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<?xml version="1.0" encoding="utf-8"?>
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:flexlib="http://code.google.com/p/flexlib/"
	xmlns:business="com.flexsqladmin.sqladmin.business.*" 
	xmlns:control="com.flexsqladmin.sqladmin.control.*"
	xmlns:components="com.flexsqladmin.sqladmin.components.*"
	layout="absolute" 
	creationComplete="init();" 
	keyUp="handleShortCuts(event);">
	
	<mx:Script> 
		<![CDATA[
            import com.adobe.cairngorm.business.ServiceLocator;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.flexsqladmin.sqladmin.components.CreateEditTableWindow;
            import com.flexsqladmin.sqladmin.components.DebugWindow;
            import com.flexsqladmin.sqladmin.components.QueryWindow;
            import com.flexsqladmin.sqladmin.components.RolesWindow;
            import com.flexsqladmin.sqladmin.components.UsersWindow;
            import com.flexsqladmin.sqladmin.components.ViewWindow;
            import com.flexsqladmin.sqladmin.events.ExecuteSQLEvent;
            import com.flexsqladmin.sqladmin.events.MetaDataEvent;
            import com.flexsqladmin.sqladmin.events.TableDetailsEvent;
            import com.flexsqladmin.sqladmin.model.ModelLocator;
            import com.flexsqladmin.sqladmin.view.AboutWindow;
            import com.flexsqladmin.sqladmin.view.LoginWindow;
            import com.flexsqladmin.sqladmin.view.OpenTableWindow;
            import com.flexsqladmin.sqladmin.vo.ConnectionVO;
            
            import flexlib.containers.SuperTabNavigator;
            import flexlib.controls.SuperTabBar;
            import flexlib.controls.tabBarClasses.SuperTab;
            import flexlib.events.SuperTabEvent;
            
            import mx.controls.Alert;
            import mx.controls.ComboBox;
            import mx.managers.PopUpManager;
            import mx.rpc.soap.mxml.WebService;
			
			public var debug_win:DebugWindow;
			private var exectimer:Timer;
			private var DEBUG:Boolean;
			
			[Embed("/icons/close_tab.png")]
			public var closeTabImg : Class;
			[Embed("/icons/script_select.png")]
			public var QWimg : Class;
            [Embed("/icons/table_add.png")]
            public var NTimg:Class;
            [Embed("/icons/group.png")]
            public var UsersImg:Class;
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			public function init():void{
				
				DEBUG = true;
				
				if (DEBUG) {
					//Popup Debug
					debug_win = PopUpManager.createPopUp(this, DebugWindow, false) as DebugWindow;
					DebugWindow.log("main.mxml:init()");
					debug_win.visible = false;
				}
				
				//Regiser Some Things with the model
				model.main_tabnav = tabnavigator;
				// Initial tab:
				callLater(addTab, ["Default Query Window", tabnavigator]);
				
				//Locate and load the wsdl page
				var urlpattern:RegExp = /SQLAdmin.swf/i; 
				var wsdl:String = "";
				try {
                    if(Application.application.parameters.webservice == undefined || Application.application.parameters.webservice == '' ){
                        wsdl = "http://localhost:8080/adminws/ns0.wsdl";
                    } else {
                        wsdl = Application.application.parameters.webservice;
                    }

					DebugWindow.log("Using WSDL location - " + wsdl);
                    var services:Array = ['sqlWebService'
                        , 'TableDetailsService'
                        , 'UsersAndRolesService'
                        ];
                    for each (var name:String in services) {
                        var s:WebService = ServiceLocator.getInstance().getService(name) as WebService;
                        s.wsdl = wsdl;
                        s.loadWSDL();
                    }
				} catch (e:Error) {
					mx.controls.Alert.show("Error Loading WSDL", "WSDL Error");
				}				
				
				//Popup the login box later so it properly steals focus.
				callLater(showLogin, [true]);
				
			}
			
			private function openTable(table:String):void{
				var opentablewindow:OpenTableWindow = OpenTableWindow(PopUpManager.createPopUp(this, OpenTableWindow, true));
				opentablewindow.setStyle("borderAlpha", 0.8);
				opentablewindow.showCloseButton = true; 
				opentablewindow.setTablename(table);
			}
			
            /**
            * @param firstTime - Used for initializing first query tab
            * 
            */
			private function showLogin(firstTime : Boolean = false) : void {
				DebugWindow.log("main.mxml:showLogin()");
				var loginForm:LoginWindow = LoginWindow(PopUpManager.createPopUp(this, LoginWindow, !DEBUG));
				loginForm.setStyle("borderAlpha", 0.8);
				loginForm.showCloseButton = true;
				if (firstTime) { // need to remove closability from initial tab at this point.
					callLater(function():void {
                        tabnavigator.setClosePolicyForTab(0, SuperTab.CLOSE_NEVER);
                    });
				}
			}
			
			private function loadMetaData():void{
				DebugWindow.log("main.xml:loadMetaData() - Connection " + model.connectionVO.getConnectionString());
				var catalog:String = mycatalog.selectedItem.CATALOG_NAME;
				var metaevent:MetaDataEvent = new MetaDataEvent(catalog);
				CairngormEventDispatcher.getInstance().dispatchEvent(metaevent);
			}
			
			private function toggleDebugWindow():void {
				DebugWindow.log("main.xml:toggleDebugWindow()");
				if (DEBUG) {
					debug_win.visible = (debug_win.visible) ? false : true;
				}
			}
						
			public function addTab(lbl:String, navigator:SuperTabNavigator,
								   child_obj:String = "", icon:Class=null) : Object {
				
				if(lbl=="")
					lbl = "Query Window";// + (navigator.numChildren + 1);
				var child:VBox = new VBox();
				child.setStyle("closable", true);
				child.label = lbl;
				
                var added_obj : DisplayObject = null;
				if (child_obj == "") {
					var qw:QueryWindow = new QueryWindow();
					qw.id = "qw-" + (model.aryQueryWindows._len + 1).toString();
                    added_obj = qw;
                    child.id = qw.id;
                    child.icon = QWimg;
				} else if (child_obj == "createTable") {
                    var ctw:CreateEditTableWindow = new CreateEditTableWindow();
                    ctw.id = "ctw-" + (model.table_details._len + 1).toString();
                    added_obj = ctw;
                    child.id = ctw.id;
                    child.icon = NTimg;
                } else if (child_obj == "viewWindow") {
                    var vw:ViewWindow = new ViewWindow();
                    vw.id = "vw-" + (model.table_details._len + 1).toString();
                    added_obj = vw;
                    child.id = vw.id;
                } else if (child_obj == "usersWindow") {
                    var uw:UsersWindow = new UsersWindow();
                    uw.id = "uw-" + (model.users_windows._len + 1).toString();
                    added_obj = uw;
                    child.id = uw.id;
                    child.icon = UsersImg;
                } else if (child_obj == "rolesWindow") {
                    var rw:RolesWindow = new RolesWindow();
                    rw.id = "rw-" + (model.roles_windows._len + 1).toString();
                    added_obj = rw;
                    child.id = rw.id;
                } else {
                    return null;
                }
                if (icon != null) // override default
                    child.icon = icon;
                child.name = child.id;
                child.addChild(added_obj);
				navigator.addChild(child);

				navigator.selectedIndex = navigator.numChildren - 1;
                return added_obj;
			}
			
			private function destroyTab(e : SuperTabEvent) : void {
                var id:String = VBox(tabnavigator.getChildAt(e.tabIndex)).id;
				DebugWindow.log("main.mxml:destroyTabButton() - " + id);
                if (model.aryQueryWindows[id] != null)
                    model.aryQueryWindows[id] = null;
                if (model.query_results[id] != null)
                    model.query_results[id] = null;
                if (model.table_details[id] != null)
                    model.query_results[id] = null;
                if (model.roles_windows[id] != null)
                    model.roles_windows[id] = null;
                if (model.users_windows[id] != null) {
                    UsersWindow(model.users_windows[id]).sessionTimer.stop();
                    model.users_windows[id] = null;
                }
			}
			
			private function showAboutWindow():void{
				var aboutWindow:AboutWindow = AboutWindow(PopUpManager.createPopUp(this, AboutWindow, true));
				aboutWindow.setStyle("borderAlpha", 0.8);
				aboutWindow.showCloseButton = true;
			}
			
			private function handleShortCuts(e:KeyboardEvent):void{
				if (e.ctrlKey && e.keyCode == 84) // ctrl+T
					addTab("", tabnavigator);
				else if (e.ctrlKey && e.keyCode == 82) // ctrl+R
					loadMetaData();
				else if (e.ctrlKey && e.shiftKey && e.keyCode == 68) // ctrl+shift+D
					toggleDebugWindow();
                else if (e.ctrlKey && e.keyCode == 78) // ctrl+N
                    addTab("", tabnavigator, 'createTable');
			}
			
			private function changeHandler(event:Event):void {
				
				var my:ComboBox = ComboBox(event.target);
				var metadata:MetaDataEvent = new MetaDataEvent(ComboBox(event.target).selectedItem.CATALOG_NAME);
				CairngormEventDispatcher.getInstance().dispatchEvent(metadata);
			}   

      private function add_item_click() : void {
        var selected:Object = add_item_list.selectedItem;
        if (selected.action == 'query') {
          addTab('', tabnavigator);
        } else if (selected.action == 'table') {
          addTab('New Table', tabnavigator, 'createTable');
        } else if (selected.action == 'users') {
          addTab('Users', tabnavigator, 'usersWindow');
        } else if (selected.action == 'roles') {
          addTab('New Role', tabnavigator, 'rolesWindow');
        }
      }
			
		]]>
	</mx:Script>
	
	<!-- the ServiceLocator where we specify the remote services -->
	<business:Services id="loginServices" />
	
	<!-- the FrontController, containing Commands specific to this appliation -->
	<control:Controller id="controller" />
	
    <mx:Style>
        Application{
            paddingLeft: 10px;
            paddingRight: 10px;
            paddingTop: 10px;
            paddingBottom: 10px;
            backgroundGradientColors: #AEC5E7, #5E8ED7;
        }
        HDividedBox{
            paddingLeft: 10px;
            paddingRight: 10px;
            paddingTop: 10px;
            paddingBottom: 10px;
        }
        TextArea {
            fontFamily: Verdana; 
            fontSize: 12pt;
        }
        
        /*HAccordion
        {
            backgroundColor: #FFFFFF;
            borderStyle: "solid";
            
            paddingBottom: -1;
            paddingLeft: -1;
            paddingRight: -1;
            paddingTop: -1;
            verticalGap: -1;
            horizontalGap: -1;
            textAlign: "left";
        }*/
        
       /*AccordionHeader
        {
            /*	selectedFillColors: #FFFFFF, #FFFFFF; */ /* overrides the calculated fillcolors */
            
            /*	disabledIcon: null; */
        /*    disabledSkin: ClassReference("mx.skins.halo.AccordionHeaderSkin");
            /*	downIcon: null; */
        /*    downSkin: ClassReference("mx.skins.halo.AccordionHeaderSkin");
            horizontalGap: 5;
            /*	overIcon: null; */
        /*    overSkin: ClassReference("mx.skins.halo.AccordionHeaderSkin");
            paddingTop: 5;
            paddingBottom: 5;
            /*	selectedDisabledIcon: null; */
        /*    selectedDisabledSkin: ClassReference("mx.skins.halo.AccordionHeaderSkin");
            /*	selectedDownIcon: null; */
        /*    selectedDownSkin: ClassReference("mx.skins.halo.AccordionHeaderSkin");
            /*	selectedOverIcon: null; */
        /*    selectedOverSkin: ClassReference("mx.skins.halo.AccordionHeaderSkin");
            /*	selectedUpIcon: null; */
        /*    selectedUpSkin: ClassReference("mx.skins.halo.AccordionHeaderSkin");
            
            /*	upIcon: null; */
        /*    upSkin: ClassReference("mx.skins.halo.AccordionHeaderSkin");
            
            fontFamily: accordionHeader; 
            fontWeight:bold;
            fontSize:11;
            fontSharpness:-200;
            fontThickness:-100;
            fontGridFitType: none;
        }*/
    </mx:Style>
    
	<mx:HDividedBox width="100%" height="100%" horizontalGap="5" liveDragging="true">
		
		<mx:VBox height="100%" width="30%" >
			<mx:HBox width="100%">
				<mx:Button click="loadMetaData();" icon="@Embed(source='/icons/cog.png')" toolTip="(CTRL-R) Refresh Object Browser" label="Refresh"/>
				<mx:ComboBox id ="mycatalog" dataProvider="{model.catalogdata}" labelField="CATALOG_NAME" selectedIndex="0" change="changeHandler(event)"/>
				
			</mx:HBox>
			<components:ObjectBrowser id="metadata_tree" dataProvider="{model.metadata}"/>
            </mx:VBox>
		
		<mx:VDividedBox width="100%" height="100%" verticalGap="5" liveDragging="true">
			
			<mx:Box width="100%" height="50%">
				<mx:HBox width="100%">
          <mx:Button click="add_item_click();" label="Add " icon="@Embed(source='/icons/tab_add.png')"/>
          <mx:ComboBox id="add_item_list" change="add_item_click();">
            <mx:Object label="Query Tab" action="query" />
            <mx:Object label="New Table Tab" action="table" />
            <mx:Object label="Users Info Tab" action="users" />
            <mx:Object label="New Role and Permissions Tab" action="roles" />
          </mx:ComboBox>
					<mx:Spacer width="100%"/>
					<mx:Button click="showAboutWindow();" icon="@Embed(source='/icons/information.png')" label="About" toolTip="About"/>
				</mx:HBox>
				<flexlib:SuperTabNavigator id="tabnavigator" width="100%" height="100%" alpha=".8"
										   stopScrollingEvent="{MouseEvent.MOUSE_OUT}" startScrollingEvent="{MouseEvent.MOUSE_OVER}"
										   horizontalGap="0" tabClose="destroyTab(event);"
										   closePolicy="{SuperTab.CLOSE_ALWAYS}"
                                           editableTabLabels="true"
										   />
				
			</mx:Box>
			<mx:HBox width="100%">
				<mx:Label fontWeight="bold" text="Elapsed Execution Time: {model.exectimer.time} sec(s)"/>
				<mx:Spacer width="100%"/>
				<mx:Button click="showLogin();" label="Reconnect" icon="@Embed(source='/icons/connect.png')"/>
				<mx:Label fontWeight="bold" text="{model.connectionText}"/>
			</mx:HBox>
	
		</mx:VDividedBox>
	</mx:HDividedBox>
</mx:Application>
