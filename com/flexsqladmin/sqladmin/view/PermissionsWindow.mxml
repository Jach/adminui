<!--
Copyright 2010 Dynamo Business Intelligence Corporation. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY Dynamo Business Intelligence Corporation ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Dynamo Business Intelligence Corporation OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="500" height="500"
                xmlns:com="com.flexsqladmin.sqladmin.components.*"
                creationComplete="init();"
                title="Grant Permissions"
                close="closeWin();" xmlns:treeClasses="mx.controls.treeClasses.*"
                >
    <mx:Style>
        .win {backgroundColor: #869ca7; backgroundGradientColors: #9bafb9, #68808c; }
    </mx:Style>
    <mx:VBox top="10" left="10" right="10" bottom="10" width="100%" textAlign="center" styleName="win">        
        <!--<mx:Text selectable="true" link="selectClick(event);">
            <mx:htmlText>
                <![CDATA[
<font color="#0000ff"><b><a href="event:all">Select All</a>    <a href="event:none">Select None</a></b></font>]]>
            </mx:htmlText>
        </mx:Text>-->
        <!--<mx:HBox>
            <mx:CheckBox id="apply_all" click="selectClick(event);" />
            <mx:Label text="Apply To All" />
        </mx:HBox>-->
        <mx:Tree id="items_tree"
                 dataProvider="{datacopy}"
                 labelField="@label" 
                 dragMoveEnabled="false" 
                 defaultLeafIcon="@Embed(source='/icons/database_table.png')" 
                 folderOpenIcon="@Embed(source='/icons/database.png')" 
                 folderClosedIcon="@Embed(source='/icons/database.png')" 
                 showRoot="false"
                 rowHeight="25"
                 left="5" right="5" width="100%"
                 textAlign="left"
                 itemClick="tree_itemClick(event);"
                 >
            <mx:itemRenderer>
                <mx:Component>                        
                    <treeClasses:TreeItemRenderer>
                    <mx:Script>
                        <![CDATA[
                            import com.flexsqladmin.sqladmin.utils.CustomFuncs;
                            
                            import mx.containers.HBox;
                            import mx.controls.Image;
                            import mx.controls.Label;
                            import mx.controls.treeClasses.TreeListData;
                            import mx.events.ToolTipEvent;
                            
                            public var disBox:HBox;
                            public var disLabel:Label;
                            public var iconsBox:HBox;
                            public var treeListData:TreeListData;
                            public var firstgo:Boolean = true;
                            
                            override protected function createChildren() : void {
                                super.createChildren();
                                if (firstgo) {
                                    for (var i:Number = 0; i < numChildren; i++) {
                                        super.removeChildAt(i);
                                    }
                                    if (disBox == null) {
                                        disBox = new HBox();
                                        disLabel = new Label();
                                        iconsBox = new HBox();
                                        iconsBox.percentWidth = 100;
                                        iconsBox.setStyle("paddingRight", "10");
                                        iconsBox.setStyle("horizontalAlign", "right");
                                        disBox.addChild(disLabel);
                                        disBox.addChild(iconsBox);
                                        this.addChild(disBox);
                                    }
                                    firstgo = false;
                                }
                            }
                            
                            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void {
                                treeListData = TreeListData(listData);
                                if (treeListData != null) {
                                    if (super.data) {
                                        var node:XML = treeListData.item as XML;
                                        if (node.hasOwnProperty('@actions')) {
                                            var acts:Array = String(node.@actions).split(' ');
                                            var icons:Array = [];
                                            for (var i:Number = 0; i < acts.length; i++) {
                                                if (acts[i] != 'ALL') {
                                                    icons.push(outerDocument.perms_key[acts[i]]);
                                                } else {
                                                    icons = [];
                                                    for (var p:String in outerDocument.perms_key) {
                                                        if (p != 'ALL')
                                                            icons.push(outerDocument.perms_key[p]);
                                                    }
                                                    break;
                                                }
                                            }
                                            iconsBox.removeAllChildren();
                                            for each (var perm_icon:Image in icons) {
                                                // We have to make a new Image container every time
                                                // due to funky stuff happening with removeAllChildren().
                                                var c:Image = new Image();
                                                c.source = perm_icon.source;
                                                c.toolTip = perm_icon.toolTip;
                                                c.addEventListener(ToolTipEvent.TOOL_TIP_SHOWN, toolTipShown);
                                                iconsBox.addChild(c);
                                            }
                                            disBox.setStyle("fontWeight", "bold");
                                        } else {
                                            iconsBox.removeAllChildren();
                                            disBox.setStyle("fontWeight", "normal");
                                        }
                                        
                                        disLabel.text = node.@label;
                                        
                                        disBox.height = height;
                                        disBox.width = width - (icon.width + icon.x) - icon.width + 16;
                                        disBox.x = icon.width + icon.x + 2;
                                        disBox.visible = true;
                                    }
                                }
                                super.updateDisplayList(unscaledWidth, unscaledHeight);
                            }
                            
                            public function toolTipShown(event:ToolTipEvent) : void {
                                var pt:Point = event.target.localToGlobal(new Point());
                                event.toolTip.move(pt.x, pt.y - event.target.height/2);
                            }
                            
                        ]]>
                    </mx:Script>
                    </treeClasses:TreeItemRenderer>
                </mx:Component>
            </mx:itemRenderer>
        </mx:Tree>
        <mx:Box />
        <mx:HBox textAlign="center" width="100%">
            <mx:Spacer width="50%" />
            <mx:Label fontWeight="bold" text="All Applicable" />
            <mx:CheckBox id="p_all" />
            <mx:Spacer width="50%" />
        </mx:HBox>
        <mx:HBox fontWeight="bold" width="100%">
            <mx:Spacer width="50%" />
            <mx:Form>
                <com:FormItemWithImage label="Select">
                    <mx:CheckBox id="p_select" />
                </com:FormItemWithImage>
                <com:FormItemWithImage label="Insert">
                    <mx:CheckBox id="p_insert" />
                </com:FormItemWithImage>
                <com:FormItemWithImage label="Update">
                    <mx:CheckBox id="p_update" />
                </com:FormItemWithImage>
            </mx:Form>
            <mx:Spacer width="50%" />
            <mx:Form>
                <com:FormItemWithImage label="Delete">
                    <mx:CheckBox id="p_delete" />
                </com:FormItemWithImage>
                <com:FormItemWithImage label="Execute">
                    <mx:CheckBox id="p_execute" />
                </com:FormItemWithImage>
                <com:FormItemWithImage label="Usage">
                    <mx:CheckBox id="p_usage" />
                </com:FormItemWithImage>
            </mx:Form>
            <mx:Spacer width="50%" />
        </mx:HBox>
        <mx:HBox width="100%" horizontalAlign="center">
            <mx:Button label="Save Changes" click="savePerms();" icon="@Embed(source='/icons/exec.gif')" />
        </mx:HBox>

    </mx:VBox>

    <mx:Script>
        <![CDATA[
            import mx.controls.Image;
            import com.flexsqladmin.sqladmin.utils.CustomFuncs;
            import mx.core.Container;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.flexsqladmin.sqladmin.components.DebugWindow;
            import com.flexsqladmin.sqladmin.events.UsersAndRolesEvent;
            import com.flexsqladmin.sqladmin.model.ModelLocator;
            
            import com.flexsqladmin.sqladmin.components.FormItemWithImage;
            
            import mx.events.CloseEvent;
            import mx.events.ListEvent;
            import mx.managers.PopUpManager;
            
            private var model:ModelLocator = ModelLocator.getInstance();
            
            [Bindable]
            public var datacopy:XML;
            
            
            [Bindable]
            [Embed("/icons/magnifier.png")]
            public var icon_select:Class;
            [Bindable]
            [Embed("/icons/add.png")]
            public var icon_insert:Class;
            [Bindable]
            [Embed("/icons/pencil.png")]
            public var icon_update:Class;
            [Bindable]
            [Embed("/icons/close_tab.png")]
            public var icon_delete:Class;
            [Bindable]
            [Embed("/icons/arrow_right.png")]
            public var icon_execute:Class;
            [Bindable]
            [Embed("/icons/lock_open.png")]
            public var icon_usage:Class;
            
            public var original_data:XML;
            
            public var role_name:String;
            
            private function iconToImage(icon:Class, tooltip:String = '') : Image {
                var img:Image = new Image();
                img.source = icon;
                img.toolTip = tooltip;
                return img;
            }
            
            public var perms_key:Object = {
                'ALL' : null,
                'SELECT' : iconToImage(icon_select, 'Select'),
                'INSERT' : iconToImage(icon_insert, 'Insert'),
                'UPDATE' : iconToImage(icon_update, 'Update'),
                'DELETE' : iconToImage(icon_delete, 'Delete'),
                'EXECUTE' : iconToImage(icon_execute, 'Execute'),
                'USAGE' : iconToImage(icon_usage, 'Usage')
            };

            public function init() : void {
                PopUpManager.centerPopUp(this);

                datacopy = new XML(model.metadata);
                // remove cols from consideration
                var cols:XMLList = datacopy.node.node.node.node.(@column);
                for (var i:Number = cols.length()-1; i >= 0; i--) {
                    delete cols[i];
                }
                for each (var role:XML in model.roles_info.children()) {
                    if (role.@name == role_name) {
                        for each (var perm:XML in role.permission) {
                            var type:String = String(perm.@itemType).replace('Local', '') + 's';
                            var node:XML = datacopy.schema.(@label == perm.@schemaName).node.(@label == type).node.(@label == perm.@itemName)[0];
                            node.@actions = perm.@actions;
                            node.@oldActions = perm.@actions;
                            node.@schemaName = perm.@schemaName;
                            node.@itemType = perm.@itemType;
                        }
                    }
                }
                original_data = new XML(datacopy);
                // Add colors to form items and disable entry until they click something
                for (var p:String in perms_key) {
                    var checkbox:CheckBox = CheckBox(this['p_' + p.toLowerCase()]);
                    if (p != 'ALL')
                        FormItemWithImage(checkbox.parent).imageSource = perms_key[p].source;
                    checkbox.addEventListener(MouseEvent.CLICK, permClick);
                    checkbox.enabled = false;
                }
            }
            
            public function closeWin() : void {
                PopUpManager.removePopUp(this);
            }
            
            //public function selectClick(event:TextEvent) : void {
            public function selectClick(event:Event) : void {

            }
            
            public function permClick(event:Event, other_item:XML=null) : void {
                if (items_tree.selectedItem || other_item) {
                    var perms:Array = [];
                    var revoke:String = '';
                    for (var p:String in perms_key) {
                        if (CheckBox(this['p_' + p.toLowerCase()]).selected) {
                            perms.push(p);
                        }
                        if (!event.target.selected && event.target.id == 'p_' + p.toLowerCase()) {
                            revoke = p;
                        }
                    }
                    var item:XML = (other_item) ? other_item : XML(items_tree.selectedItem);

                    item.@actions = (other_item && item.hasOwnProperty('@actions'))
                                        ? ( (revoke != '')
                                            ? CustomFuncs.ArrUnion(String(item.@oldActions).split(' '), CustomFuncs.ArrDiff(String(item.@actions).split(' '), [revoke])).join(' ')
                                            : CustomFuncs.ArrUnion(perms, String(item.@actions).split(' ')).join(' ')
                                           )
                                        :  perms.join(' ');
                    // Delete the nodes if they're empty so we don't get a diff
                    if (item.@actions == '' && !item.hasOwnProperty('@oldActions'))
                        delete item.@actions;
                    
                    for each (var child:XML in item.children()) {
                        permClick(event, child);
                    }
                }
            }
            
            public function savePerms() : void {
                var revoke_perms:Array = [];
                var grant_perms:Array = [];
                var diff_schemas:XMLList = CustomFuncs.XMLdifference(datacopy.children(), original_data.children());
                for each (var schema:XML in diff_schemas) {
                    if (schema.hasOwnProperty('@actions')) {
                        // done, simply apply perms to whole schema
                        if (schema.hasOwnProperty('@oldActions')) {
                            var to_grant:String = CustomFuncs.ArrDiff(String(schema.@actions).split(' '), String(schema.@oldActions).split(' ')).join(' ');
                            var to_revoke:String = CustomFuncs.ArrDiff(String(schema.@oldActions).split(' '), String(schema.@actions).split(' ')).join(' ');
                            grant_perms.push(new XML('<grant level="schema" name="' + schema.@label + '" perms="' + to_grant + '" />'));
                            if (to_revoke != '') revoke_perms.push(new XML('<revoke level="schema" name="' + schema.@label + '" perms="' + to_revoke + '" />'));
                        } else {
                            grant_perms.push(new XML('<grant level="schema" name="' + schema.@label + '" perms="' + schema.@actions + '" />'));
                        }
                    } else {
                        // gotta find individual tables and views with actions
                        var tabs_and_views:XMLList = schema.children();
                        for each (var tab_or_view:XML in tabs_and_views) {
                            var type:String;
                            if (tab_or_view.@label == 'Tables')
                                type = 'table';
                            else
                                type = 'view';
                            for each (var element:XML in tab_or_view.children()) {
                                if (tab_or_view.hasOwnProperty('@actions') && tab_or_view.@actions != element.@actions) {
                                    grant_perms.push(new XML('<grant level="item" type="' + type +
                                        '" name="' + element.@label + '" schemaName="' + schema.@label +
                                        '" perms="' + tab_or_view.@actions + '" />'));
                                } else {
                                    if (element.hasOwnProperty('@oldActions')) {
                                        to_grant = CustomFuncs.ArrDiff(String(element.@actions).split(' '), String(element.@oldActions).split(' ')).join(' ');
                                        to_revoke = CustomFuncs.ArrDiff(String(element.@oldActions).split(' '), String(element.@actions).split(' ')).join(' ');
                                        if (to_grant != '') {
                                            grant_perms.push(new XML('<grant level="item" type="' + type +
                                            '" name="' + element.@label + '" schemaName="' + schema.@label +
                                            '" perms="' + to_grant + '" />'));
                                        }
                                        if (to_revoke != '') {
                                            revoke_perms.push(new XML('<revoke level="item" type="' + type +
                                            '" name="' + element.@label + '" schemaName="' + schema.@label +
                                            '" perms="' + to_revoke + '" />'));
                                        }
                                    } else if (element.@oldActions != element.@actions) {
                                        grant_perms.push(new XML('<grant level="item" type="' + type +
                                            '" name="' + element.@label + '" schemaName="' + schema.@label +
                                            '" perms="' + element.@actions + '" />'));
                                    }
                                }
                            }
                        }
                       
                    }
                }
               /* trace(diff_schemas.toXMLString());
                trace('grants...');
                for each (var g:XML in grant_perms)
                    trace(g.toXMLString() + ',');
                trace('now revs...');
                for each (var r:XML in revoke_perms)
                    trace(r.toXMLString());
                */
                
                // will not have any revokes until functionality is added in LucidDB
                
                var grantEvent:UsersAndRolesEvent = new UsersAndRolesEvent('grantPermissions', '', '', role_name, '', '', grant_perms);
                CairngormEventDispatcher.getInstance().dispatchEvent(grantEvent);
                var revokeEvent:UsersAndRolesEvent = new UsersAndRolesEvent('revokePermissions', '', '', role_name, '', '', revoke_perms);
                //CairngormEventDispatcher.getInstance().dispatchEvent(revokeEvent);
            }
            
            // tree functions
            public function tree_itemClick(event:ListEvent) : void {
                var item:XML = XML(event.currentTarget.selectedItem);
                for (var p:String in perms_key) {
                    CheckBox(this['p_' + p.toLowerCase()]).selected = false;
                    CheckBox(this['p_' + p.toLowerCase()]).enabled = true;
                }
                if (item.hasOwnProperty('@actions')) {
                    for each (var perm:String in String(item.@actions).toLowerCase().split(' ')) {
                        if (perm == '') continue;
                        CheckBox(this['p_' + perm]).selected = true;
                        // TODO: allow permission revoking
                        CheckBox(this['p_' + perm]).enabled = false;
                    }
                }
            }
            
        ]]>
    </mx:Script>
    
</mx:TitleWindow>
