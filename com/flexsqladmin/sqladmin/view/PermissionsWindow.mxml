<?xml version="1.0" encoding="utf-8"?>
<!--
Dynamo Admin UI is a web service project for administering LucidDB
Copyright (C) 2010 Dynamo Business Intelligence Corporation

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version approved by Dynamo Business Intelligence Corporation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
                xmlns:com="com.flexsqladmin.sqladmin.components.*"
                title="Grant Permissions"
                creationComplete="init();"
                xmlns:treeClasses="mx.controls.treeClasses.*"
                >
    <mx:Style>
        .win {backgroundColor: #869ca7; backgroundGradientColors: #9bafb9, #68808c; }
    </mx:Style>
    <mx:HBox top="10" left="10" right="10" bottom="10" width="100%" height="100%" textAlign="center"
             styleName="win">
        <mx:Tree id="items_tree"
                 dataProvider="{datacopy}"
                 labelField="@label" 
                 dragMoveEnabled="false" 
                 defaultLeafIcon="@Embed(source='/icons/database_table.png')" 
                 folderOpenIcon="@Embed(source='/icons/database.png')" 
                 folderClosedIcon="@Embed(source='/icons/database.png')" 
                 showRoot="false"
                 rowHeight="25"
                 height="100%"
                 left="5" right="5" width="50%"
                 textAlign="left"
                 doubleClickEnabled="true"
                 itemClick="tree_itemClick(event);"
                 doubleClick="{items_tree.expandItem(items_tree.selectedItem, 
                        !items_tree.isItemOpen(items_tree.selectedItem), true, true);}"
                 >
            <mx:itemRenderer>
                <mx:Component>                        
                    <treeClasses:TreeItemRenderer>
                    <mx:Script>
                        <![CDATA[
                            import com.flexsqladmin.sqladmin.utils.CustomFuncs;
                            
                            import mx.containers.HBox;
                            import mx.controls.Image;
                            import mx.controls.Label;
                            import mx.controls.treeClasses.TreeListData;
                            import mx.events.ToolTipEvent;
                            
                            public var disBox:HBox;
                            public var disLabel:Label;
                            public var iconsBox:HBox;
                            public var treeListData:TreeListData;
                            public var firstgo:Boolean = true;
                            
                            override protected function createChildren() : void {
                                super.createChildren();
                                if (firstgo) {
                                    for (var i:Number = 0; i < numChildren; i++) {
                                        super.removeChildAt(i);
                                    }
                                    if (disBox == null) {
                                        disBox = new HBox();
                                        disLabel = new Label();
                                        iconsBox = new HBox();
                                        disBox.horizontalScrollPolicy = "off";
                                        iconsBox.percentWidth = 100;
                                        iconsBox.setStyle("paddingRight", "10");
                                        iconsBox.setStyle("horizontalAlign", "right");
                                        disBox.addChild(disLabel);
                                        disBox.addChild(iconsBox);
                                        this.addChild(disBox);
                                    }
                                    firstgo = false;
                                }
                            }
                            
                            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void {
                                treeListData = TreeListData(listData);
                                if (treeListData != null) {
                                    if (super.data) {
                                        var node:XML = treeListData.item as XML;
                                        if (node.hasOwnProperty('@actions')) {
                                            var acts:Array = String(node.@actions).split(' ');
                                            var icons:Array = [];
                                            for (var i:Number = 0; i < acts.length; i++) {
                                                if (acts[i] != 'ALL') {
                                                    icons.push(outerDocument.perms_key[acts[i]]);
                                                } else {
                                                    icons = [];
                                                    for (var p:String in outerDocument.perms_key) {
                                                        if (p != 'ALL')
                                                            icons.push(outerDocument.perms_key[p]);
                                                    }
                                                    break;
                                                }
                                            }
                                            iconsBox.removeAllChildren();
                                            for each (var perm_icon:Image in icons) {
                                                // We have to make a new Image container every time
                                                // due to funky stuff happening with removeAllChildren().
                                                var c:Image = new Image();
                                                c.source = perm_icon.source;
                                                c.toolTip = perm_icon.toolTip;
                                                c.addEventListener(ToolTipEvent.TOOL_TIP_SHOWN, toolTipShown);
                                                iconsBox.addChild(c);
                                            }
                                            disBox.setStyle("fontWeight", "bold");
                                        } else {
                                            iconsBox.removeAllChildren();
                                            disBox.setStyle("fontWeight", "normal");
                                        }
                                        
                                        disLabel.text = node.@label;
                                        
                                        disBox.height = height;
                                        disBox.width = width - (icon.width + icon.x) - icon.width + 16;
                                        disBox.x = icon.width + icon.x + 2;
                                        disBox.visible = true;
                                    }
                                }
                                super.updateDisplayList(unscaledWidth, unscaledHeight);
                            }
                            
                            public function toolTipShown(event:ToolTipEvent) : void {
                                var pt:Point = event.target.localToGlobal(new Point());
                                event.toolTip.move(pt.x, pt.y - event.target.height/2);
                            }
                            
                        ]]>
                    </mx:Script>
                    </treeClasses:TreeItemRenderer>
                </mx:Component>
            </mx:itemRenderer>
        </mx:Tree>
        <mx:VBox width="50%">
        <mx:Box />
        <mx:HBox textAlign="center" width="100%">
            <mx:Spacer width="50%" />
            <mx:Label fontWeight="bold" text="All Applicable" />
            <mx:CheckBox id="p_all" />
            <mx:Spacer width="50%" />
        </mx:HBox>
        <mx:HBox fontWeight="bold" width="100%">
            <mx:Spacer width="50%" />
            <mx:Form>
                <com:FormItemWithImage label="Select">
                    <mx:CheckBox id="p_select" />
                </com:FormItemWithImage>
                <com:FormItemWithImage label="Insert">
                    <mx:CheckBox id="p_insert" />
                </com:FormItemWithImage>
                <com:FormItemWithImage label="Update">
                    <mx:CheckBox id="p_update" />
                </com:FormItemWithImage>
            </mx:Form>
            <mx:Spacer width="50%" />
            <mx:Form>
                <com:FormItemWithImage label="Delete">
                    <mx:CheckBox id="p_delete" />
                </com:FormItemWithImage>
                <com:FormItemWithImage label="Execute">
                    <mx:CheckBox id="p_execute" />
                </com:FormItemWithImage>
                <com:FormItemWithImage label="Usage">
                    <mx:CheckBox id="p_usage" />
                </com:FormItemWithImage>
            </mx:Form>
            <mx:Spacer width="50%" />
        </mx:HBox>
        <mx:HBox width="100%" horizontalAlign="center">
            <mx:Button label="Save Changes" click="savePerms();" icon="@Embed(source='/icons/exec.gif')" />
        </mx:HBox>

        </mx:VBox>
    </mx:HBox>

    <mx:Script>
        <![CDATA[
            import mx.controls.Image;
            import com.flexsqladmin.sqladmin.utils.CustomFuncs;
            import mx.core.Container;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.flexsqladmin.sqladmin.components.DebugWindow;
            import com.flexsqladmin.sqladmin.events.UsersAndRolesEvent;
            import com.flexsqladmin.sqladmin.model.ModelLocator;
            
            import com.flexsqladmin.sqladmin.components.FormItemWithImage;
            
            import mx.events.CloseEvent;
            import mx.events.ListEvent;
            
            private var model:ModelLocator = ModelLocator.getInstance();
            
            [Bindable]
            public var datacopy:XML;
            
            [Bindable]
            [Embed("/icons/magnifier.png")]
            public var icon_select:Class;
            [Bindable]
            [Embed("/icons/add.png")]
            public var icon_insert:Class;
            [Bindable]
            [Embed("/icons/pencil.png")]
            public var icon_update:Class;
            [Bindable]
            [Embed("/icons/close_tab.png")]
            public var icon_delete:Class;
            [Bindable]
            [Embed("/icons/arrow_right.png")]
            public var icon_execute:Class;
            [Bindable]
            [Embed("/icons/lock_open.png")]
            public var icon_usage:Class;
            
            public var original_data:XML;
            
            //public var role_name:String;
            public var grantee:String;
            public var grantee_type:String;
            
            private var nodes_to_update:Array = [];
            
            private function iconToImage(icon:Class, tooltip:String = '') : Image {
                var img:Image = new Image();
                img.source = icon;
                img.toolTip = tooltip;
                return img;
            }
            
            public var perms_key:Object = {
                'ALL' : null,
                'SELECT' : iconToImage(icon_select, 'Select'),
                'INSERT' : iconToImage(icon_insert, 'Insert'),
                'UPDATE' : iconToImage(icon_update, 'Update'),
                'DELETE' : iconToImage(icon_delete, 'Delete'),
                'EXECUTE' : iconToImage(icon_execute, 'Execute'),
                'USAGE' : iconToImage(icon_usage, 'Usage')
            };

            public function init() : void {
                datacopy = new XML(model.metadata.schemas);
                // remove cols from consideration until luciddb supports it
                var cols:XMLList = datacopy..column;
                for (var i:Number = cols.length()-1; i >= 0; i--) {
                    delete cols[i];
                }
                /*
                // also remove functions, procedures, jars until we program it
                var funcs:XMLList = datacopy..functions;
                for (i = funcs.length()-1; i >= 0; i--)
                    delete funcs[i];
                var procs:XMLList = datacopy..procedures;
                for (i = procs.length()-1; i >= 0; i--)
                    delete procs[i];
                var jars:XMLList = datacopy..jars;
                for (i = jars.length()-1; i >= 0; i--)
                    delete jars[i];
                */
                
                original_data = new XML(datacopy);
                // Add icons to form items and disable entry until they click something
                for (var p:String in perms_key) {
                    var checkbox:CheckBox = CheckBox(this['p_' + p.toLowerCase()]);
                    if (p != 'ALL')
                        FormItemWithImage(checkbox.parent).imageSource = perms_key[p].source;
                    checkbox.addEventListener(MouseEvent.CLICK, permClick);
                    checkbox.enabled = false;
                }
                
                load_roles_info();
            }
            
            private function load_roles_info() : void {
                // Block until we have the info (supplied by the user of this view.)
                if (model.roles_info == null) {
                    callLater(load_roles_info);
                    return;
                }
                for each (var role:XML in model.roles_info.children()) {
                    if (role.@name == grantee) {
                        for each (var perm:XML in role.permission) {
                            var type:String = String(perm.@itemType).replace('Local', '').toLowerCase();
                            var type_label:String = String(perm.@itemType).replace('Local', '') + 's';
                            var schema:XML = datacopy.schema.(@label == perm.@schemaName)[0];
                            /* foreign table hack: */
                            if (type == 'foreigntable') type = 'foreign_table';
                            if (type_label == 'ForeignTables') type_label = 'Foreign Tables';
                            var category:XML = schema[type + 's'][0];
                            var node:XML = category.(@label == type_label)[type].(@label == perm.@itemName)[0];
                            node.@actions = perm.@actions;
                            node.@oldActions = perm.@actions;
                            node.@schemaName = perm.@schemaName;
                            node.@itemType = perm.@itemType;
                        }
                    }
                }
            }
            
            public function permClick(event:Event, other_item:XML=null) : void {
                if (items_tree.selectedItem || other_item) {
                    var perms:Array = [];
                    var revoke:String = '';
                    for (var p:String in perms_key) {
                        if (CheckBox(this['p_' + p.toLowerCase()]).selected) {
                            perms.push(p);
                        }
                        if (!event.target.selected && event.target.id == 'p_' + p.toLowerCase()) {
                            revoke = p;
                        }
                    }
                    var item:XML = (other_item) ? other_item : XML(items_tree.selectedItem);

                    item.@actions = (other_item && item.hasOwnProperty('@actions'))
                                        ? ( (revoke != '')
                                            ? CustomFuncs.ArrUnion(String(item.@oldActions).split(' '), CustomFuncs.ArrDiff(String(item.@actions).split(' '), [revoke])).join(' ')
                                            : CustomFuncs.ArrUnion(perms, String(item.@actions).split(' ')).join(' ')
                                           )
                                        :  perms.join(' ');
                    // Delete the nodes if they're empty so we don't get a diff
                    if (item.@actions == '' && !item.hasOwnProperty('@oldActions'))
                        delete item.@actions;
                    
                    for each (var child:XML in item.children()) {
                        permClick(event, child);
                    }
                }
            }
            
            public function savePerms() : void {
                var revoke_perms:Array = [];
                var grant_perms:Array = [];
                var diff_schemas:XMLList = CustomFuncs.XMLdifference(datacopy.children(), original_data.children());
                for each (var schema:XML in diff_schemas) {
                    if (schema.hasOwnProperty('@actions')) {
                        // done, simply apply perms to whole schema
                        if (schema.hasOwnProperty('@oldActions')) {
                            var to_grant:String = CustomFuncs.ArrDiff(String(schema.@actions).split(' '), String(schema.@oldActions).split(' ')).join(' ');
                            var to_revoke:String = CustomFuncs.ArrDiff(String(schema.@oldActions).split(' '), String(schema.@actions).split(' ')).join(' ');
                            grant_perms.push(new XML('<grant level="schema" name="' + schema.@label + '" perms="' + to_grant + '" />'));
                            if (to_revoke != '') revoke_perms.push(new XML('<revoke level="schema" name="' + schema.@label + '" perms="' + to_revoke + '" />'));
                        } else {
                            grant_perms.push(new XML('<grant level="schema" name="' + schema.@label + '" perms="' + schema.@actions + '" />'));
                        }
                        // make list of old actions so we don't get these again on successful send
                        nodes_to_update.push(schema);
                    } else {
                        // gotta find individual tables and views with actions
                        
                        // note: no longer just tables or views
                        
                        var tabs_and_views:XMLList = schema.children();
                        for each (var tab_or_view:XML in tabs_and_views) {
                            var type:String;
                            if (tab_or_view.@label == 'Tables')
                                type = 'table';
                            else if (tab_or_view.@label == 'Views')
                                type = 'view';
                            else
                                type = String(tab_or_view).toLowerCase().replace(' ', '_').substring(0, -1);
                            for each (var element:XML in tab_or_view.children()) {
                                if (tab_or_view.hasOwnProperty('@actions') && tab_or_view.@actions != element.@actions) {
                                    grant_perms.push(new XML('<grant level="item" type="' + type +
                                        '" name="' + element.@label + '" schemaName="' + schema.@label +
                                        '" perms="' + tab_or_view.@actions + '" />'));
                                } else {
                                    if (element.hasOwnProperty('@oldActions')) {
                                        to_grant = CustomFuncs.ArrDiff(String(element.@actions).split(' '), String(element.@oldActions).split(' ')).join(' ');
                                        to_revoke = CustomFuncs.ArrDiff(String(element.@oldActions).split(' '), String(element.@actions).split(' ')).join(' ');
                                        if (to_grant != '') {
                                            grant_perms.push(new XML('<grant level="item" type="' + type +
                                            '" name="' + element.@label + '" schemaName="' + schema.@label +
                                            '" perms="' + to_grant + '" />'));
                                        }
                                        if (to_revoke != '') {
                                            revoke_perms.push(new XML('<revoke level="item" type="' + type +
                                            '" name="' + element.@label + '" schemaName="' + schema.@label +
                                            '" perms="' + to_revoke + '" />'));
                                        }
                                    } else if (element.@oldActions != element.@actions) {
                                        grant_perms.push(new XML('<grant level="item" type="' + type +
                                            '" name="' + element.@label + '" schemaName="' + schema.@label +
                                            '" perms="' + element.@actions + '" />'));
                                    }
                                }
                                nodes_to_update.push(element);
                            }
                        }
                       
                    }
                }
               /* trace(diff_schemas.toXMLString());
                trace('grants...');
                for each (var g:XML in grant_perms)
                    trace(g.toXMLString() + ',');
                trace('now revs...');
                for each (var r:XML in revoke_perms)
                    trace(r.toXMLString());
                */
                
                // (if nodes_to_update does not work, may need to make it nodes_to_skip )
                
                // will not have any revokes until functionality is added in LucidDB
                
                // PermissionGroup: grant_perms, grantee
                // on success, freeze granted ones. (don't do the re-do query)
                if (grantee_type == 'role') {
                    var grantEvent:UsersAndRolesEvent = new UsersAndRolesEvent('grantPermissions', '', '', grantee, '', '', grant_perms);
                    var revokeEvent:UsersAndRolesEvent = new UsersAndRolesEvent('revokePermissions', '', '', grantee, '', '', revoke_perms);
                } else if (grantee_type == 'user') {
                    grantEvent = new UsersAndRolesEvent('grantPermissions', grantee, '', '', '', '', grant_perms);
                    revokeEvent = new UsersAndRolesEvent('revokePermissions', grantee, '', '', '', '', revoke_perms);
                }
                CairngormEventDispatcher.getInstance().dispatchEvent(grantEvent);
               // CairngormEventDispatcher.getInstance().dispatchEvent(revokeEvent);
                
                // disable revoking on selected item:
                var item:XML = XML(items_tree.selectedItem);
                if (item.hasOwnProperty('@actions')) {
                    for each (var perm:String in String(item.@actions).toLowerCase().split(' ')) {
                        if (perm == '') continue;
                        CheckBox(this['p_' + perm]).enabled = false;
                    }
                }
            }
            
            // tree functions
            public function tree_itemClick(event:ListEvent) : void {
                var item:XML = XML(event.currentTarget.selectedItem);
                for (var p:String in perms_key) {
                    CheckBox(this['p_' + p.toLowerCase()]).selected = false;
                    CheckBox(this['p_' + p.toLowerCase()]).enabled = true;
                }
                if (item.hasOwnProperty('@actions')) {
                    for each (var perm:String in String(item.@actions).toLowerCase().split(' ')) {
                        if (perm == '') continue;
                        CheckBox(this['p_' + perm]).selected = true;
                        // TODO: allow permission revoking
                        CheckBox(this['p_' + perm]).enabled = false;
                    }
                }
            }
            
        ]]>
    </mx:Script>
    
</mx:TitleWindow>
