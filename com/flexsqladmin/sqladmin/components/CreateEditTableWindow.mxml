<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:flexlib="http://code.google.com/p/flexlib/"
           xmlns:components="com.flexsqladmin.sqladmin.components.*"
           width="100%" height="100%"
           keyUp="handleShortcuts(event);"
           creationComplete="init();"
           >
    
    
    <mx:HBox width="100%" left="10" right="10">
        <mx:Button click="submitCreateTable();" toolTip="Create Your Table" label="Create Your Table"
                   icon="@Embed(source='icons/exec.gif')" />
        <mx:Button click="addNewColumn();" toolTip="(CTRL+F?) Add Column" label="Add Column" />
    </mx:HBox>

    <mx:HBox width="100%" backgroundColor="#A9C0E7" left="10" right="10" top="30">
        <mx:Form width="100%" top="30">
            <mx:FormItem label="Catalog">
                <mx:Label text="{model.currentcatalogname}" />
            </mx:FormItem>
            <mx:FormItem label="Schema">
                <mx:ComboBox id="table_schema" dataProvider="{model.metadata.children()}"
                             labelField="@label" />
                <mx:Button click="newSchema();" label="New Schema" />
            </mx:FormItem>
        </mx:Form>
        
        <mx:Form width="100%" top="30">
            <mx:FormItem label="Table Name">
                <mx:TextInput id="table_name" text="{TD.details.@name}" />                
            </mx:FormItem>
            <mx:FormItem label="Create Time">
                <mx:DateField id="table_create_time" formatString="YYYY-MM-DD"
                              showToday="true"
                              selectedDate="{new Date()}"
                              text="{TD.details.@createTime}" />
            </mx:FormItem>
        </mx:Form>
    </mx:HBox>
    
    <mx:HBox id="col_info" left="10" right="10" top="145" bottom="10" width="50%" height="100%">
        <mx:AdvancedDataGrid id="col_grid" dataProvider="{col_list}" click="selectColumn(event);" height="100%" width="50%">
            <mx:columns>
                <mx:AdvancedDataGridColumn id="col_name" headerText="Column Name" dataField="@name" />
                <mx:AdvancedDataGridColumn id="col_datatype" headerText="Data Type" dataField="@datatype" />
            </mx:columns>
        </mx:AdvancedDataGrid>
        <mx:HBox id="selected_form" visible="false" />
    </mx:HBox>
    
    <mx:Script>
        <![CDATA[
            import com.adobe.cairngorm.business.ServiceLocator;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.flexsqladmin.sqladmin.components.ColumnForm;
            import com.flexsqladmin.sqladmin.components.DebugWindow;
            import com.flexsqladmin.sqladmin.events.ExecuteSQLEvent;
            import com.flexsqladmin.sqladmin.events.TableDetailsEvent;
            import com.flexsqladmin.sqladmin.model.ModelLocator;
            import com.flexsqladmin.sqladmin.utils.ActionEnum;
            import com.flexsqladmin.sqladmin.vo.TableDetailsVO;
            
            import flash.events.Event;
            
            import mx.collections.ArrayCollection;
            import mx.containers.Accordion;
            import mx.containers.VBox;
            import mx.controls.CheckBox;
            import mx.managers.PopUpManager;
            /* We have to embed a font for the Accordion. Without doing this the
            * labels that are rotated will be invisible.
            */
            [Embed(systemFont='Arial', fontWeight="bold", fontName='accordionHeader', mimeType='application/x-font', advancedAntiAliasing='true')] 
            private var font1:Class;

            [Bindable]
            private var model:ModelLocator = ModelLocator.getInstance();
            [Bindable]
            public var TD:TableDetailsVO;
            
            [Bindable]
            public var col_list : ArrayCollection = new ArrayCollection();
            public var col_forms : ArrayCollection = new ArrayCollection();

            public function init() : void {
                TD = new TableDetailsVO();
                model.table_details[id] = TD;
                model.table_details._len += 1;
                //addColumn();
            }
            
            public function handleShortcuts(e:KeyboardEvent) : void {
                if(e.ctrlKey && e.keyCode == 70) { // ctrl + F
                    addNewColumn();
                }
            }
            
            public function addNewColumn() : void {
                var col_form : ColumnForm = new ColumnForm();
                col_form.editable = true;
                col_form.col_details = <details name="NEW COLUMN" isNullable="" datatype="INTEGER" decDigits="" precision="" />;
                col_list.addItem(col_form.col_details);
                col_forms.addItem(col_form);
                var idx:int = col_list.length - 1;
                col_grid.selectedIndex = idx;
                selectColumn();
                callLater(function():void {
                    col_form.col_name.addEventListener(Event.CHANGE, function(event:Event):void {
                        col_list.getItemAt(idx).@name = event.target.text;
                        col_list.refresh();
                    });
                });
                callLater(function():void {
                    col_form.col_type.addEventListener(Event.CHANGE, function(event:Event):void {
                        col_list.getItemAt(idx).@datatype = event.target.selectedItem;
                        col_list.refresh();
                    });
                });

            }
            
            public function addColumnsFromDetails() : void {
                for each (var col:XML in TD.details.descendants("column")) {
                    col_list.addItem(col);
                    var col_form : ColumnForm = new ColumnForm();
                    col_form.editable = false;
                    col_form.col_details = col;
                    
                    col_forms.addItem(col_form);
                    //callLater(col_form.findIndex);

                    //selected_form = col_form;
                    //col_info.addChild(col_form);
                }

                // Also load the schema:
                for (var i:Number = 0; i < table_schema.dataProvider.length; i++) {
                    if (table_schema.dataProvider[i].@label == TD.details.@schema) {
                        table_schema.selectedIndex = i;
                        break;
                    }
                }
            }
            
            public function selectColumn(event:Event=null) : void {
                selected_form.removeAllChildren();
                var col_form : ColumnForm = col_forms[col_grid.selectedIndex];
                if (!col_form.loaded) {
                    selected_form.visible = true;
                    callLater(col_form.findIndex);
                }
                selected_form.addChild(col_form);
            }
            
            public function submitCreateTable() : void {
                //  NOTE: you cannot rename a column.
                // Renaming a tablename means making a new table.
                // Changing the schema means copying the table to a different schema.
                // They shouldn't be allowed to change the create time.
                // Can't alter column structures.
                TD.details.setName("details");
                var td_event:TableDetailsEvent = new TableDetailsEvent(model.currentcatalogname,
                    table_schema.text, table_name.text, ActionEnum.POST, TD.details);
                CairngormEventDispatcher.getInstance().dispatchEvent(td_event);
            }
            
            public function newSchema() : void {
                /*var opentablewindow:OpenTableWindow = OpenTableWindow(PopUpManager.createPopUp(this, OpenTableWindow, true));
                opentablewindow.setStyle("borderAlpha", 0.8);
                opentablewindow.showCloseButton = true;
                */
            }
   
            private function getDefaults() : ArrayCollection {
                return new ArrayCollection([{label: "now", data: "now"}, {label: "CUSTOM", data: "CUSTOM"}]);
            }
            
            private function getCollations() : ArrayCollection {
                return new ArrayCollection([{label: "utf", data: "utf8"}]);
            }
            
            private function getAttributes() : ArrayCollection {
                return new ArrayCollection([{label: "unsigned", data: "unsigned"}, {label: "on update", data: "on update"}]);
            }
            
            private function getIndicies() : ArrayCollection {
                return new ArrayCollection([{label: "primary", data: "primary"}]);
            }
            
            
        ]]>
    </mx:Script>

</mx:Canvas>
