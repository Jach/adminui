<?xml version="1.0" encoding="utf-8"?>
<!--
Dynamo Admin UI is a web service project for administering LucidDB
Copyright (C) 2010 Dynamo Business Intelligence Corporation

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version approved by Dynamo Business Intelligence Corporation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:flexlib="http://code.google.com/p/flexlib/"
           xmlns:components="com.flexsqladmin.sqladmin.components.*"
           width="100%" height="100%"
           keyUp="handleShortcuts(event);"
           creationComplete="init();"
           >
    
    <mx:states>
        <mx:State name="edit">
            <mx:SetProperty target="{submit_btn}" name="toolTip" value="Update your Table" />
            <mx:SetProperty target="{submit_btn}" name="label" value="Update your Table" />
            <mx:SetProperty target="{table_name}" name="editable" value="false" />
            <mx:SetProperty target="{table_schema}" name="editable" value="false" />
            <mx:SetProperty target="{new_schema_btn}" name="visible" value="false" />
        </mx:State>
    </mx:states>
    
    <mx:HBox width="100%" left="10" right="10">
        <mx:Button id="submit_btn" click="submitCreateTable();" 
                   toolTip="Create Table" label="Create your Table"
                   icon="@Embed(source='/icons/exec.gif')" />
    </mx:HBox>

    <mx:Binding source="table_name.text" destination="TD.details.@name" />
    <mx:Binding source="table_create_time.text" destination="TD.details.@createTime" />
    <mx:HBox width="100%" backgroundColor="#A9C0E7" left="10" right="10" top="30">
        <mx:Form width="100%" top="30">
            <mx:FormItem label="Catalog">
                <mx:Label text="{model.currentcatalogname}" />
            </mx:FormItem>
            <mx:FormItem label="Schema">
                <mx:HBox>
                <mx:ComboBox id="table_schema" prompt="Select Schema" selectedIndex="-1"
                             dataProvider="{new XMLList(model.metadata.schemas.children())}"
                             labelField="@label" />
                <mx:Button id="new_schema_btn" click="newSchema();" label="New Schema" 
                           icon="@Embed(source='/icons/database_add.png')" />
                </mx:HBox>
            </mx:FormItem>
        </mx:Form>

        <mx:Form width="100%" top="30">
            <mx:FormItem label="Table Name">
                <mx:TextInput id="table_name" text="{TD.details.@name}" />
            </mx:FormItem>
            <mx:FormItem label="Create Time">
                <mx:DateField id="table_create_time" formatString="YYYY-MM-DD"
                              showToday="true"
                              selectedDate="{new Date()}"
                              text="{new Date()}" />
            </mx:FormItem>
        </mx:Form>
    </mx:HBox>
    <mx:Button left="{10 + col_grid.x + col_grid.width - newcol_btn.width}" top="120" id="newcol_btn" click="addNewColumn();"
               toolTip="(CTRL+F) Add Column" label="Add Column"
               icon="@Embed(source='/icons/textfield_add.png')" />    
    <mx:HBox id="col_info" left="10" right="10" top="145" bottom="10" width="50%" height="100%">
        <mx:AdvancedDataGrid id="col_grid" dataProvider="{col_list}" click="selectColumn(event);" height="100%" width="50%">
            <mx:columns>
                <mx:AdvancedDataGridColumn id="col_name" headerText="Column Name" dataField="@name" />
                <mx:AdvancedDataGridColumn id="col_datatype" headerText="Data Type" dataField="@datatype" />
            </mx:columns>
        </mx:AdvancedDataGrid>
        <mx:HBox id="selected_form" visible="false" />
    </mx:HBox>
    
    <mx:Script>
        <![CDATA[
            import com.adobe.cairngorm.business.ServiceLocator;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.flexsqladmin.sqladmin.components.ColumnForm;
            import com.flexsqladmin.sqladmin.components.DebugWindow;
            import com.flexsqladmin.sqladmin.events.ExecuteSQLEvent;
            import com.flexsqladmin.sqladmin.events.TableDetailsEvent;
            import com.flexsqladmin.sqladmin.model.ModelLocator;
            import com.flexsqladmin.sqladmin.utils.ActionEnum;
            import com.flexsqladmin.sqladmin.view.NewSchemaWindow;
            import com.flexsqladmin.sqladmin.vo.TableDetailsVO;
            
            import flash.events.Event;
            
            import mx.collections.ArrayCollection;
            import mx.containers.Accordion;
            import mx.containers.VBox;
            import mx.controls.Alert;
            import mx.controls.CheckBox;
            import mx.managers.PopUpManager;
            /* We have to embed a font for the Accordion. Without doing this the
            * labels that are rotated will be invisible.
            */
            /*[Embed(systemFont='Arial', fontWeight="bold", fontName='accordionHeader', mimeType='application/x-font', advancedAntiAliasing='true')] 
            private var font1:Class;
            */

            [Bindable]
            private var model:ModelLocator = ModelLocator.getInstance();
            [Bindable]
            public var TD:TableDetailsVO;
            
            [Bindable]
            public var col_list : ArrayCollection = new ArrayCollection();
            public var col_forms : ArrayCollection = new ArrayCollection();

            public function init() : void {
                TD = new TableDetailsVO();
                TD.details.@createTime = table_create_time.text;
                table_create_time.enabled = false;
            }
            
            public function handleShortcuts(e:KeyboardEvent) : void {
                if(e.ctrlKey && e.keyCode == 70) { // ctrl + F
                    addNewColumn();
                }
            }
            
            public function addNewColumn() : void {
                var col_form : ColumnForm = new ColumnForm();
                col_form.editable = true;
                col_form.num_existing_rows = TD.details.@currentRowCount;
                col_form.col_details = <details name="NEWCOLUMN" isNullable="false" datatype="INTEGER" decDigits="" precision="" defaultValue="" />;
                col_list.addItem(col_form.col_details);
                col_forms.addItem(col_form);
                var idx:int = col_list.length - 1;
                col_grid.selectedIndex = idx;
                selectColumn();
                callLater(function():void {
                    col_form.col_name.addEventListener(Event.CHANGE, function(event:Event):void {
                        col_list.getItemAt(idx).@name = event.target.text;
                        col_list.refresh();
                    });
                });
                callLater(function():void {
                    col_form.col_type.addEventListener(Event.CHANGE, function(event:Event):void {
                        col_list.getItemAt(idx).@datatype = event.target.selectedItem;
                        col_list.refresh();
                    });
                });

            }
            
            public function addColumnsFromDetails() : void {
                for each (var col:XML in TD.details.descendants("column")) {
                    col_list.addItem(col);
                    var col_form : ColumnForm = new ColumnForm();
                    col_form.editable = false;
                    col_form.num_existing_rows = TD.details.@currentRowCount;
                    col_form.col_details = new XML(col);
                    
                    col_forms.addItem(col_form);
                }
                
                table_create_time.text = TD.details.@createTime;

                // Also load the schema:
                for (var i:Number = 0; i < table_schema.dataProvider.length; i++) {
                    if (table_schema.dataProvider[i].@label == TD.details.@schema) {
                        table_schema.selectedIndex = i;
                        break;
                    }
                }
                
                // And disable/rename some fields.
                this.currentState = "edit";
            }
            
            public function selectColumn(event:Event=null) : void {
                if (col_grid.selectedIndex == -1)
                    return;
                
                selected_form.removeAllChildren();
                var col_form : ColumnForm = col_forms[col_grid.selectedIndex];
                if (!col_form.loaded) {
                    selected_form.visible = true;
                    callLater(col_form.findIndex);
                }
                selected_form.addChild(col_form);
            }
            
            public function submitCreateTable() : void {
                for (var i:Number = 0; i < TD.details.children().length(); i++)
                    delete TD.details.column[i];
                    
                if (table_schema.selectedIndex == -1) {
                    Alert.show("Please select a schema.", "Error");
                    return;
                }
                for each (var col_form:ColumnForm in col_forms) {
                    if (col_form.default_required && col_form.col_default.text == '') {
                        Alert.show("Please fill in the default value on your non-nullable column.", "Error");
                        return;
                    }
                    TD.details.appendChild(col_form.col_details);
                }
                var detail_data:XML = new XML(TD.details);
                detail_data.setName("details");
                var td_event:TableDetailsEvent = new TableDetailsEvent(model.currentcatalogname,
                    table_schema.text, table_name.text, ActionEnum.POST, detail_data);
                CairngormEventDispatcher.getInstance().dispatchEvent(td_event);
            }
            
            public function newSchema() : void {
                var sch_win:NewSchemaWindow = NewSchemaWindow(PopUpManager.createPopUp(this, NewSchemaWindow, true));
                sch_win.setStyle("borderAlpha", 0.8);
                sch_win.showCloseButton = true;
                sch_win.addEventListener(Event.CLOSE, function():void {
                    table_schema.dataProvider = new XMLList(model.metadata.children());
                });
            }
            
            public function select_schema(name:String) : void {
                for (var i:Number = 0; i < table_schema.dataProvider.children().length; i++) {
                    if (table_schema.selectedLabel == name)
                        table_schema.selectedIndex = i;
                }
            }
            
            
        ]]>
    </mx:Script>

</mx:Canvas>
