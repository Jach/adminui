<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright 2010 Dynamo Business Intelligence Corporation. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY Dynamo Business Intelligence Corporation ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Dynamo Business Intelligence Corporation OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:components="com.flexsqladmin.sqladmin.components.*"
           xmlns:views="com.flexsqladmin.sqladmin.views.*"
           width="100%"
           height="100%"
           creationComplete="init();" xmlns:view="com.flexsqladmin.sqladmin.view.*"
           >

    <mx:states>
        <mx:State name="edit">
            <mx:SetProperty target="{r_pan}" name="title" value="Modify Role" />
            <mx:AddChild relativeTo="{r_name_item}">
                <mx:ComboBox id="edit_role_list" dataProvider="{model.roles_list}"
                             creationComplete="select_role(selected_role);"
                             change="role_change();" />
            </mx:AddChild>
            <mx:RemoveChild target="{role_name}" />
            <mx:RemoveChild target="{save_btn}" />
        </mx:State>
    </mx:states>
    
    <mx:HBox left="10" right="10" top="10" bottom="10" width="100%">
        <mx:Panel id="r_pan" title="New Role" height="100%">
            <mx:Form>
                <mx:FormItem id="r_name_item" label="Name: ">
                    <mx:TextInput creationComplete="{role_name.enabled=!modding;}" id="role_name" />
                </mx:FormItem>
                <mx:FormItem>
                    <mx:Button creationComplete="{save_btn.enabled=!modding;}" id="save_btn" label="Save Name" click="saveName();" icon="@Embed(source='/icons/exec.gif')" />                    
                </mx:FormItem>
            </mx:Form>
        </mx:Panel>
        <mx:Panel title="Assign Users to Roles (Expected Functionality Not Currently Supported In LucidDB)" width="100%" height="100%">
        <mx:AdvancedDataGrid enabled="{modding}" id="role_users" dataProvider="{role_users_data_collection()}" width="100%">
            <mx:columns>
                <mx:AdvancedDataGridColumn id="r_user" headerText="User" dataField="@user" />
                <mx:AdvancedDataGridColumn editable="{modding}" rendererIsEditor="true" textAlign="center" id="r_add" headerText="Added To This Role">
                    <mx:itemRenderer>
                        <mx:Component>
                            <!-- Currently can't revoke -->
                            <mx:CheckBox click="if (!selected) { event.preventDefault(); selected=true; return; }
                                         data.@added = selected; data.@with_grant = (!selected) ? 'false' : data.@with_grant;
                                         outerDocument.user_click(data.@user, data.@added, data.@with_grant);"
                                         enabled="{outerDocument.modding}" updateComplete="{selected = (data.@added == 'true');}"
                                         />
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:AdvancedDataGridColumn>
                <mx:AdvancedDataGridColumn textAlign="center" id="r_grant" headerText="With Grant Option">
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:CheckBox click="data.@with_grant = selected; data.@added = 'true';
                                         outerDocument.user_click(data.@user, data.@added, data.@with_grant);"
                                         enabled="{outerDocument.modding}" updateComplete="{selected = (data.@with_grant == 'true');}" />
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:AdvancedDataGridColumn>
            </mx:columns>
        </mx:AdvancedDataGrid>
        </mx:Panel>
    </mx:HBox>

    <mx:ComboBox height="0%" valueCommit="{reloadUsers();}" dataProvider="{model.users_list}" visible="false" />

    <mx:Script>
        <![CDATA[
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.flexsqladmin.sqladmin.components.DebugWindow;
            import com.flexsqladmin.sqladmin.events.ExecuteSQLEvent;
            import com.flexsqladmin.sqladmin.events.UsersAndRolesEvent;
            import com.flexsqladmin.sqladmin.model.ModelLocator;
            import com.flexsqladmin.sqladmin.view.PermissionsWindow;
            
            import mx.collections.ArrayCollection;
            import mx.controls.CheckBox;
            import mx.effects.Pause;
            import mx.managers.PopUpManager;
            
            [Bindable]
            public var role_users_data:Dictionary = new Dictionary();
            
            [Bindable]
            private var model:ModelLocator = ModelLocator.getInstance();
            
            [Bindable]
            public var modding:Boolean = false;
            
            [Bindable]
            public var selected_role:String;
            
            public function init() : void {
                if (!model.users_list) {
                    var usersEvent:UsersAndRolesEvent = new UsersAndRolesEvent('getUsersDetails');
                    CairngormEventDispatcher.getInstance().dispatchEvent(usersEvent);
                }
                if (!model.roles_list) {
                    var rolesEvent:UsersAndRolesEvent = new UsersAndRolesEvent('getRolesDetails');
                    CairngormEventDispatcher.getInstance().dispatchEvent(rolesEvent);
                }
                
                reloadUsers();
            }
            
            public function reloadUsers() : void {
                if (model.roles_info == null) {
                    callLater(reloadUsers);
                    return;
                }
                role_users_data = new Dictionary();
                //var blah:Array = ['no', 'yes', 'blah', 'sha', 'crap', 'fill', 'me', 'up', 'big', 'boy'];
                //for each (var b:String in model.users_list) {blah.push(b);}
                for each (var user:String in model.users_list) {
                    role_users_data[user] = new XML('<node user="' + user + '" added="false" with_grant="false" />');
                }
                
                if (modding) {
                    for each (var el:XML in model.roles_info.children()) {
                        if (el.@name == selected_role) {
                            var users:Array = String(el.users).split(' ');
                            var grant_users:Array = String(el.users_with_grant_option).split(' ');
                            for each (user in users)
                                if (user in role_users_data)
                                    role_users_data[user].@added = true;
                            for each(var grant:String in grant_users)
                                if (grant in role_users_data)
                                    role_users_data[user].@with_grant = true;
                        }
                    }
                }
                
                dispatchEvent(new Event("usersChange"));
            }
            
            [Bindable(Event="usersChange")]
            public function role_users_data_collection() : ArrayCollection {
                var coll:ArrayCollection = new ArrayCollection();
                for each (var el:XML in role_users_data) {
                    coll.addItem(el);
                }
                if (coll.length == 0) {
                    coll.addItem(new XML('<node user="Loading..." added="false" with_grant="false" />'));
                }
                return coll;
            }
            
            public function saveName() : void {
                if (role_name.text != '') {
                    selected_role = role_name.text.toUpperCase();
                    var usersEvent:UsersAndRolesEvent = new UsersAndRolesEvent('addNewRole', '','', role_name.text);
                    CairngormEventDispatcher.getInstance().dispatchEvent(usersEvent);
                    modding = true;
                }
            }
            
            public function deleteRole() : void {
                var dr:UsersAndRolesEvent = new UsersAndRolesEvent('deleteRole', '', '', role_name.text);
                CairngormEventDispatcher.getInstance().dispatchEvent(dr);
            }
            
            public function user_click(name:String, added:String, with_grant:String) : void {
                var user_to_role:UsersAndRolesEvent = new UsersAndRolesEvent('userToRole', name, '', role_name.text, added, with_grant);
                CairngormEventDispatcher.getInstance().dispatchEvent(user_to_role);
            }
            
            public function select_role(role:String='') : void {
                if (role == '')
                    role = selected_role;
                else
                    selected_role = role;
                for (var i:Number = 0; i < edit_role_list.dataProvider.length; i++) {
                    if (edit_role_list.dataProvider[i] == role) {
                        edit_role_list.selectedIndex = i;
                        return;
                    }
                }
            }
            
            public function role_change() : void {
                selected_role = edit_role_list.selectedLabel;
                model.roles_info = null;
                var rolesEvent:UsersAndRolesEvent = new UsersAndRolesEvent('getRolesDetails');
                CairngormEventDispatcher.getInstance().dispatchEvent(rolesEvent);
                reloadUsers();
            }
            
        ]]>
    </mx:Script>
</mx:Canvas>
