<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright 2010 Dynamo Business Intelligence Corporation. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY Dynamo Business Intelligence Corporation ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Dynamo Business Intelligence Corporation OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<mx:Tree xmlns:mx="http://www.adobe.com/2006/mxml"
         itemRenderer="com.flexsqladmin.sqladmin.components.ObjectTreeRenderer"
         dataDescriptor="{new ObjectTreeDataDescriptor()}"
         dragMoveEnabled="false" 
         height="95%" width="100%" 
         doubleClickEnabled="true"
         labelField="@label" 
         showRoot="false" 
         dataProvider="{tree_data}"
         keyUp="debug(event);"
         creationComplete="init();">
    <mx:Script>
        <![CDATA[
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.adobe.serialization.json.JSON;
            import com.flexsqladmin.sqladmin.components.DebugWindow;
            import com.flexsqladmin.sqladmin.components.ObjectTreeRenderer;
            import com.flexsqladmin.sqladmin.events.ExecuteSQLEvent;
            import com.flexsqladmin.sqladmin.events.MetaDataEvent;
            import com.flexsqladmin.sqladmin.events.TableDetailsEvent;
            import com.flexsqladmin.sqladmin.model.ModelLocator;
            import com.flexsqladmin.sqladmin.utils.ActionEnum;
            import com.flexsqladmin.sqladmin.view.NewSchemaWindow;
            import com.flexsqladmin.sqladmin.view.OpenTableWindow;
            
            import mx.containers.VBox;
            import mx.controls.Alert;
            import mx.controls.Menu;
            import mx.core.Application;
            import mx.events.CloseEvent;
            import mx.events.ListEvent;
            import mx.events.MenuEvent;
            import mx.managers.PopUpManager;

            [Embed("/icons/table_edit.png")]
            public var ETimg:Class;
            [Embed("/icons/script_edit.png")]
            public var VWedImg:Class;

            [Embed(source="/icons/script_select.png")]
            private var selecticon:Class;
            [Embed(source="/icons/script_add.png")]
            private var inserticon:Class;
            [Embed(source="/icons/script_edit.png")]
            private var updateicon:Class;
            [Embed(source="/icons/script_delete.png")]
            private var deleteicon:Class;
            [Embed(source="/icons/open_table.png")]
            private var opentableicon:Class;
            [Embed(source="/icons/script_exec.png")]
            private var scriptexec:Class;
            
            [Embed("/icons/close_tab.png")]
            public var closeicon : Class;
            [Embed("/icons/confirm.png")]
            public var confirmicon : Class;

            
            [Embed(source="/icons/database_add.png")]
            private var add_schema_icon:Class;
            [Embed(source="/icons/delete.png")]
            private var drop_icon:Class;
            [Embed(source="/icons/add.png")]
            private var add_icon:Class;
            [Embed(source="/icons/group_edit.png")]
            private var edit_user_icon:Class;
            
            private var clickx:int = 0;
            private var clicky:int = 0;
            private var click_interval:Number = 0;
            
            private var menu_closed:Boolean = true;
            private var model:ModelLocator = ModelLocator.getInstance();
            
            [Bindable]
            public var tree_data:XML;
            
            private var object_menus:Object = new Object();
            
            public function debug(e:KeyboardEvent) : void {
                if (e.keyCode == 84) { // T
                    tree_data.schemas.schema[0].tables.appendChild(<node label="Ough" />);
                    //this.validateNow();
                    //trace(XML(dataProvider).toXMLString());
                } else if (e.keyCode == 82) { // R
                    addTable('CRAPPY', 'deck', <details createTime="2010-08-11" name="deck">
  
  <column name="NEWCOLUMN" isNullable="false" datatype="INTEGER" decDigits="" precision="" defaultValue=""/>
</details>);
                } else if (e.keyCode == 68) { // D
                    delete tree_data.schemas.schema[0].tables.table.(@label == 'Ough')[0];
                } else if (e.keyCode == 78) {// N
                    //for each (var el:XML in model.metadata.schema)
                    //    tree_data.schemas.appendChild(el);
                    trace(tree_data.toXMLString());
                    //real_dp.appendChild(model.metadata);
                    //delete real_dp.schemas[0];
                }
            }

            /**
            * Set up the skeleton for our tree, along with a few mouse click event handlers.
            * Finally calls the function to setup all of the context menus and their handlers.
            */
            public function init() : void {
                /*
                <foreign_tables label="Foreign Tables">
                <foreign_table label="Salesforce Table 1" />
                </foreign_tables>
                <functions label="Functions">
                <function label="UDF1" />
                </functions>
                <procedures label="Procedures">
                <procedure label="Proc1" />
                </procedures>
                </schema>
                */
                model.object_tree = this;
                var schemas_load:String = JSON.encode(
                    {'service': 'sqlWebService', 'operation': 'getDBMetaData',
                     'arguments': {'connection': '', 'catalog': model.currentcatalogname} }
                    );
                //var users_load:String = JSON.encode({'service': '
                var skeleton:XML = <tree>
                    <schemas label="Schemas" loadInfo={schemas_load}>
                    </schemas>
                    <security label="Security">
                        <users label="Users">
                        </users>
                        <roles label="Roles">
                        </roles>
                    </security>
                    <remote_data label="Remote Data">
                        <wrapper label="Wrapper 1">
                            <servers label="Servers">
                                <server label="SFDC_WRAPPER" />
                            </servers>
                        </wrapper>
                        <wrapper label="Wrapper 2">
                            <servers label="Servers">
                                <server label="MYSQL_SRV1" />
                                <server label="ORACLE_SRV2" />
                            </servers>
                        </wrapper>
                    </remote_data>
                    <jars label="Jars">
                        <jar label="Jar1" />
                        <jar label="Jar2" />
                    </jars>
                    <system label="System">
                        <counters label="Counters" />
                        <configuration label="Configuration" />
                        <sessions label="Active Sessions" />
                    </system>
                    <networks label="Networks">
                        <network label="network.dynamobi.com">
                            <package label="SFDC package" />
                            <package label="Stats package" />
                            <package label="Zendesk package" />
                            <package label="Google Analytics package" />
                        </network>
                    </networks>
                    </tree>
                    ;
                //trace(skeleton.toXMLString());
                tree_data = skeleton;
                
                var expandTree:Function = function():void {
                    clearInterval(click_interval);
                    expandItem(selectedItem, !isItemOpen(selectedItem), true, true);
                };
                
                this.addEventListener(MouseEvent.CLICK, clickHandler, false, 1);
                this.addEventListener(ListEvent.ITEM_CLICK, listItemClickHandler, false, 2);
                this.addEventListener(ListEvent.ITEM_DOUBLE_CLICK, expandTree, false, 5);
            
                // This is the meat of our tree and is an incredibly long function
                // mostly due to the amount of configuration for all of the context menus.
                register_contexts_and_handlers();
            }
            
            // These three functions do all our mouse click event handling.
            
            private function clickHandler(e:MouseEvent):void{
                clickx = e.stageX;
                clicky = e.stageY;
            }
            
            private function listItemClickHandler(event:ListEvent) : void {
                // We use click intervals to get a better doubleClick than Flex's
                // normal behavior because of interference with single-click
                // context menus.
                clearInterval(click_interval);
                click_interval = setInterval(deferredListItemClickHandler, 200);
            }
            
            private function deferredListItemClickHandler() : void {
                clearInterval(click_interval);
                
                if (object_menus.hasOwnProperty(XML(selectedItem).localName())) {
                    if (menu_closed) {
                        menu_closed = false;
                        var context:ObjectTree = this;
                        var menu_info:Object = object_menus[XML(selectedItem).localName()];
                        var myMenu:Menu = Menu.createMenu(null, menu_info['info']);
                        myMenu.show(clickx + 25, clicky);
                        myMenu.addEventListener(MenuEvent.ITEM_CLICK, function(event:MenuEvent):void {
                            menu_info['handler'](event.index, context);
                        });
                        myMenu.addEventListener(Event.CLOSE, function():void { menu_closed = true; });
                    } else {
                        menu_closed = true;
                    }
                }
            }
            

            
            //////////////////////////////////////////////////////////////////////////////////////            
            // Define many helper functions and abstraction functions for
            // register_contexts_and_handlers().
            //////////////////////////////////////////////////////////////////////////////////////  
            

            

            /**
            * Creates a context menu along with its corresponding handler function called
            * when an item in the menu is clicked.
            * 
            * @element - The XML tag name this context menu maps to.
            * @menu_info - An array of objects passed to the Menu creator that determine labels, icons, 
            *              separators, and groups.
            * @handler - form: function(index:Number, context:ObjectTree). Will be called on a click,
            *            the index being the clicked item's index and the context being
            *            this entire ObjectTree.
            */ 
            private function register_context(element:String, menu_info:Array, handler:Function) : void {
                object_menus[element] = {'info': menu_info, 'handler': handler};
            }
            
            /**
            * Generic handler for when we want a popup view for some action.
            * 
            * @cl - The class type of the view we're loading.
            * @close - An optional function to call when the window is closed.
            * 
            * @return - Returns the created view for potential customization by the caller.
            */
            private function popup_new(cl:Class, close:Function=null) : Object {
                var win:Object = Object(PopUpManager.createPopUp(parent.parent, cl, true));
                win.setStyle("borderAlpha", 0.8);
                win.showCloseButton = true;
                if (close != null) {
                    win.addEventListener(Event.CLOSE, close);
                }
                return win;
            }
            
            /**
            * Simple wrapper for a handler function, useful for the singleton
            * 'add new' items that create a popup.
            * 
            * @inner_func - Custom inner function to call.
            * @args - Optional arguments to pass to the inner function.
            * 
            * @return - Returns the created handler function. (This is like a decorator.) 
            */
            private function handler_wrapper(inner_func:Function=null, args:Array=null) : Function {
                return function(index:Number, context:ObjectTree) : void {
                    if (inner_func != null && index == 0) {
                        if (args != null) {
                            inner_func.apply(context, args);
                        } else {
                            inner_func();
                        }
                    }
                }
            }

            /**
            * Generic function to drop an item and remove it from our tree.
            */
            private function drop_remove_item(item:String, cascade:Boolean,
                                              warn_msg:String, success_msg:String,
                                              context:ObjectTree, remove_item:XML) : void {
                var casc:String = (cascade) ? 'CASCADE' : '';
                query_dispatcher('DROP ' + item + ' "' + context.model.currentcatalogname + '"."' +
                    get_schema(context) + '"."' + context.selectedItem.@label + '" ' + casc,
                    warn_msg,
                    function(querydata:XML):void {
                        if (querydata.datamap == 'Error') {
                            Alert.show(querydata.NewDataSet.Table.Error, 'Error');
                        } else {
                            Alert.show(success_msg, 'Success');
                            context.deleteItem(remove_item);
                        }
                    }
                );
            }
            
            /**
            * Flex is really stupid about this,
            * so we have to use this method to delete an item we have the node for.
            * 
            * @return - The success of the delete.
            */
            public function deleteItem(item:XML) : Boolean {
                var parent_list:XMLList = XMLList(item.parent().children());
                for (var i:Number = 0; i < parent_list.length(); i++) {
                    if (parent_list[i] == item) {
                        delete parent_list[i];
                        return true;
                    }
                }
                return false;
            }
            
            /**
             * Adds a new schmea to our tree.
             * TODO: abstract this into a generalized function like remove.
             */
            public function addSchema(name:String) : void {
                var node:XML = <schema label={name}></schema>
                for (var i:Number = 0; i < tree_data.schemas.children().length(); i++) {
                    if (tree_data.schemas.schema[i].@label < name)
                        continue;
                    tree_data.schemas.insertChildBefore(tree_data.schemas.schema[i], node);
                    return;
                }
                tree_data.schemas.appendChild(node);
            }
            
            /**
             * Adds a new table with columns to our tree.
             * TODO: possibly abstract this into a generalized function like remove. (Too hard for
             * this one?)
             */
            public function addTable(schema:String, name:String, details:XML) : void {
                var cols:String = '';
                var col_nodes:XMLList = new XMLList();
                for (var i:Number = 0; i < details.children().length(); i++) {
                    cols += "&quot;" + details.column[i].@name + "&quot;";
                    var label:String = details.column[i].@name + ' (' + details.column[i].@datatype + ',';
                    label += (details.column[i].@isNullable == 'true') ? 'NULL' : 'NOT NULL';
                    label += ')';
                    col_nodes += <column column={details.column[i].@name} label={label} />;
                }
                var sql:String = "SELECT " + cols + " FROM &quot;" + schema + "&quot;.&quot;" + name + "&quot;";
                var node:XML = <table label={name} sqlquery={sql}>
                {col_nodes}
                </table>;
                var schema_node:XML = tree_data.schemas.schema.(@label == schema)[0];
                for (i = 0; i < schema_node.tables.children().length(); i++) {
                    if (schema_node.tables.table[i].@label < name)
                        continue;
                    schema_node.tables.insertChildBefore(schema_node.tables.table[i], node);
                    return;
                }
                schema_node.tables.appendChild(node);
            }

            /**
            * Util for grabbing the column names of the selected item (assumed to be a table
            * or something with column children), with the option of appending something to the
            * quoted identifier.
            */
            private function get_column_names(context:ObjectTree, append:String='') : String {
                var cols:String = '';
                for (var x:Number = 0; x < context.selectedItem.children().length(); x++){
                    cols += "&quot;" + context.selectedItem.column[x].@column + "&quot;" + append;
                    if (x + 1 < this.selectedItem.children().length())
                        cols += ", \r";
                }
                return cols;
            }
            
            /**
            * Util for getting the schema name of the selected item; assumes something like
            * a schema->between_item->selected_item.
            */
            private function get_schema(context:ObjectTree) : String {
                return context.getParentItem(context.getParentItem(context.selectedItem)).@label;
            }
            
            /**
            * Util for creating a script as query from the selected item.
            */
            private function script_as_query(context:ObjectTree) : void {
                var query:String = "SELECT ";
                var schema:String = get_schema(context);
                query += get_column_names(context);
                query += "\rFROM " + "\"" + context.model.currentcatalogname + "\".\"" + 
                    schema + 
                    "\".\"" + context.selectedItem.@label + "\"";
                script_query(query, schema);
            }
            
            /**
            * Inserts a script-as command into an empty query window.
            */
            private function script_query(query:String, guessed_schema:String='') : void {
                var qw:QueryWindow = model.aryQueryWindows[VBox(model.main_tabnav.selectedChild).id];
                if (qw && qw.isEmpty()) {
                    qw.setText(query);
                } else {
                    qw = QueryWindow(Application.application.addTab("Query Window", model.main_tabnav));
                    qw.setText(query);
                }
                qw.guessed_schema = guessed_schema;
            }
            
            /**
            * Dispatches a query which uses an Alert Confirmation before running.
            * 
            * @query - Query to execute
            * @warn_msg - Confirmation message to send
            * @special_func - Optional function to call on success instead of using the default
            *                 executesql behavior.
            */
            private function query_dispatcher(query:String, warn_msg:String,
                                              special_func:Function=null) : void {
                Alert.show(warn_msg, "Confirmation", Alert.YES|Alert.NO,
                    Application.application as Application,
                    function(event:CloseEvent):void { // confirm handler
                        if (event.detail == Alert.YES) {
                            if (special_func == null) {
                                var sqlevent:ExecuteSQLEvent = new ExecuteSQLEvent(query, "normal");
                            } else {
                                sqlevent = new ExecuteSQLEvent(query, "special", special_func);
                            }
                            CairngormEventDispatcher.getInstance().dispatchEvent(sqlevent);
                        }
                    }, confirmicon, Alert.NO);
            }
            

            
            /**
            * Mega function that sets up all of our context menus with their
            * corresponding handlers.
            */
            public function register_contexts_and_handlers() : void {
                var con_row:Function = function (label:String, icon:Class) : Object {
                    return {'label': label, 'icon': icon};
                };
                var gen_add:Object = con_row('Add New', add_icon);
                var gen_drop:Object = con_row('Drop', drop_icon);
                    
                register_context("schemas", [con_row('Add New', add_schema_icon)],
                    handler_wrapper(popup_new, [NewSchemaWindow])
                );
                register_context("schema", [gen_drop,
                    con_row('Drop Cascade', drop_icon),
                    con_row('Analyze All Tables In Schema', null)],
                    function (index:Number, context:ObjectTree) : void {
                        if (index == 0 || index == 1) {
                            var casc:String = (index == 1) ? 'CASCADE' : '';
                            query_dispatcher('DROP SCHEMA "' + context.model.currentcatalogname + '"."' +
                                context.selectedItem.@label + '" ' + casc,
                                "Are you sure you want to\ndrop this schema?");
                        }
                    }
                );
                register_context("tables", [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        //
                    }
                );
                register_context('table', [con_row('Script as Select', selecticon),
                    con_row('Script as Insert', inserticon),
                    con_row('Script as Update', updateicon),
                    con_row('Script as Delete', deleteicon),
                    {type: 'separator'},
                    con_row('Open', opentableicon),
                    gen_drop,
                    con_row('Edit', updateicon),
                    con_row('Storage Report', null),
                    con_row('Analyze Table', null)
                    ],
                    function (index:Number, context:ObjectTree) : void {
                        var query:String = ''
                        var schema:String = get_schema(context);
                        if (index == 0) {
                            script_as_query(context);
                        } else if (index == 1) {
                            query = "INSERT INTO " + "\"" + context.model.currentcatalogname + "\".\"" + 
                            get_schema(context) + 
                            "\".\"" + context.selectedItem.@label + "\"" + " \r(\r";
                            query += get_column_names(context);
                            query += "\r)\r VALUES\r (\r";
                            /*for (x = 0; x < context.selectedItem.children().length(); x++){
                                query += "{" + context.selectedItem.column[x].@label + "}";
                                if (x + 1 < context.selectedItem.children().length())
                                    query += ", \r";
                            }*/
                            query += "\r)";
                        } else if (index == 2) {
                            query = "UPDATE " + "\"" + context.model.currentcatalogname + "\".\"" +
                            schema +
                            "\".\"" + context.selectedItem.@label + "\"" + " \rSET\r";
                            query += get_column_names(context, ' = { }');
                            query += "\rWHERE {SEARCH_CONDITIONS}";
                        } else if (index == 3) {
                            query = "DELETE FROM " + "\"" + context.model.currentcatalogname + "\".\"" +
                            schema +
                            "\".\"" + context.selectedItem.@label + "\"" + "\rWHERE {SEARCH_CONDITIONS}";
                        // 4 is the separator
                        } else if (index == 5) {
                            OpenTableWindow(popup_new(OpenTableWindow)).setTablename(schema +
                                "." + context.selectedItem.@label);
                        } else if (index == 6) {
                            drop_remove_item('TABLE', true, 'Are you sure you want to\n' +
                                'drop cascade this table?', 'Table Dropped Successfully', context, 
                                tree_data.schemas.schema.(@label == schema)[0].tables.table.(
                                                          @label == context.selectedItem.@label)[0]
                            );
                        } else if (index == 7) {
                            var tab_win : CreateEditTableWindow = CreateEditTableWindow(
                                Application.application.addTab("Edit Table " + context.selectedItem.@label,
                                    context.model.main_tabnav, 'createTable', context.ETimg)
                            );
                            // Grab the table data.
                            var td_event:TableDetailsEvent = new TableDetailsEvent(model.currentcatalogname,
                                schema, context.selectedItem.@label, ActionEnum.GET);
                            CairngormEventDispatcher.getInstance().dispatchEvent(td_event);
                        } else if (index == 8) {
                            
                        } else if (index == 9) {
                            
                        }

                        if (query.length > 0) {
                            script_query(query, schema);                            
                        }
                    }
                );
                register_context('column', [con_row('Data Stats', null)],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('views', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('view', [gen_drop,
                    con_row('Edit', updateicon),
                    con_row('Select As', selecticon)],
                    function (index:Number, context:ObjectTree) : void {
                        if (index == 0) {
                            drop_remove_item('VIEW', true, 'Are you sure you want to\n' +
                                'drop cascade this view?', 'View Dropped Successfully', context, 
                                tree_data.schemas.schema.(@label == get_schema(context))[0].views.view.(
                                    @label == context.selectedItem.@label)[0]
                            );
                        } else if (index == 1) {
                            var loadCrap:Function = function(querydata:XML):void {
                                var schema:String = querydata.NewDataSet.Table.SCHEMA_NAME;
                                var view:String = querydata.NewDataSet.Table.VIEW_NAME;
                                var desc:String = querydata.NewDataSet.Table.REMARKS;
                                var create_date:String = querydata.NewDataSet.Table.CREATION_TIMESTAMP;
                                var text:String = querydata.NewDataSet.Table.ORIGINAL_TEXT;
                                
                                var vw:ViewWindow = ViewWindow(Application.application.addTab("Edit View " +
                                    view, model.main_tabnav, "viewWindow", VWedImg));
                                vw.setText(text);
                                vw.editing = true;
                                vw.view_name.text = view;
                                vw.view_desc.text = desc;
                                callLater(vw.guess_schema, [schema]);
                            };
                            var query : String = 'SELECT SCHEMA_NAME, VIEW_NAME,' +
                            ' REMARKS, ' +
                            ' CREATION_TIMESTAMP, ORIGINAL_TEXT' +
                            ' FROM "LOCALDB"."SYS_ROOT"."DBA_VIEWS" WHERE ' +
                            "SCHEMA_NAME = '" + get_schema(context) + "' AND " +
                            "VIEW_NAME = '" + context.selectedItem.@label + "'";
                            var sqlevent:ExecuteSQLEvent = new ExecuteSQLEvent(query, "special", loadCrap);
                            CairngormEventDispatcher.getInstance().dispatchEvent(sqlevent);             
                        } else if (index == 2) {
                            script_as_query(context);
                        }
                    }
                );
                register_context('foreign_tables', [con_row('Import', null)],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('foreign_table', [con_row('Select As', null),
                    gen_drop,
                    con_row('Reimport', null)],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('functions', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('function', [gen_drop,
                    con_row('View Details', null)],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('procedures', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('procedure', [con_row('View Details', null)],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                // None for security?
                register_context('users', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('user', [con_row('Edit', edit_user_icon),
                    gen_drop],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('roles', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('role', [con_row('Edit', edit_user_icon)],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('remote_data', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('wrapper', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('wrapper', [con_row('View Details', null)],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('servers', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('server', [gen_drop,
                    con_row('Edit', null),
                    con_row('Import Objects', null),
                    con_row('Verify', null)],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('jars', [gen_add],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('jar', [gen_drop,
                    con_row('Add', null)],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('counters', [con_row('Performance Monitor', null)],
                    function (index:Number, context:ObjectTree) : void {
                        
                    }
                );
                register_context('configuration', [con_row('Edit', null)],
                    function (index:Number, context:ObjectTree) : void {
                            
                    }
                );
                register_context('sessions', [con_row('Active Sessions', null)],
                    function (index:Number, context:ObjectTree) : void {
                        Application.application.addTab("Active Sessions",
                            context.model.main_tabnav, 'usersWindow');
                    }
                );
                    
            }
        ]]>
    </mx:Script>
    
</mx:Tree>
