<?xml version="1.0" encoding="utf-8"?>
<mx:Tree xmlns:mx="http://www.adobe.com/2006/mxml"
	dragMoveEnabled="false" 
	defaultLeafIcon="@Embed(source='/icons/database_table.png')" 
	folderOpenIcon="@Embed(source='/icons/database.png')" 
	folderClosedIcon="@Embed(source='/icons/database.png')" 
	height="95%" width="100%" 
	dragEnabled="true"
    doubleClickEnabled="true"
	labelField="@label" 
	showRoot="false" 
	rowHeight="25"
	creationComplete="init();">
	
	<mx:Script>
		<![CDATA[
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.flexsqladmin.sqladmin.components.DebugWindow;
            import com.flexsqladmin.sqladmin.events.ExecuteSQLEvent;
            import com.flexsqladmin.sqladmin.events.MetaDataEvent;
            import com.flexsqladmin.sqladmin.events.TableDetailsEvent;
            import com.flexsqladmin.sqladmin.model.ModelLocator;
            import com.flexsqladmin.sqladmin.utils.ActionEnum;
            import com.flexsqladmin.sqladmin.view.OpenTableWindow;
            
            import mx.containers.VBox;
            import mx.controls.Alert;
            import mx.controls.Menu;
            import mx.core.Application;
            import mx.events.CloseEvent;
            import mx.events.ListEvent;
            import mx.events.MenuEvent;
            import mx.managers.PopUpManager;
            
            [Embed(source="/icons/script_select.png")]
            private var selecticon:Class;
            [Embed(source="/icons/script_add.png")]
            private var inserticon:Class;
            [Embed(source="/icons/script_edit.png")]
            private var updateicon:Class;
            [Embed(source="/icons/script_delete.png")]
            private var deleteicon:Class;
            [Embed(source="/icons/open_table.png")]
            private var opentableicon:Class;
            [Embed(source="/icons/script_exec.png")]
            private var scriptexec:Class;
            [Embed("/icons/close_tab.png")]
            public var closeicon : Class;
            [Embed("/icons/confirm.png")]
            public var confirmicon : Class;

            private var clickx:int = 0;
            private var clicky:int = 0;
            private var menu_closed:Boolean = true;
            private var model:ModelLocator = ModelLocator.getInstance();
            
            public function init():void{
                var expandTree:Function = function():void {
                    expandItem(selectedItem, !isItemOpen(selectedItem), true);
                };
                
            	this.addEventListener(MouseEvent.CLICK, clickHandler, false, 1);
                this.addEventListener(ListEvent.ITEM_CLICK, listItemClickHandler, false, 2);
                this.addEventListener(MouseEvent.DOUBLE_CLICK, expandTree, false, 3);
                this.addEventListener(ListEvent.ITEM_DOUBLE_CLICK, expandTree, false, 5);

            }
            
            private function clickHandler(e:MouseEvent):void{
            	clickx = e.stageX;
            	clicky = e.stageY;
            }
            
			private function listItemClickHandler(event:Event):void {
            	if(this.selectedItem.@sqlquery != null && this.selectedItem.@sqlquery.toString().length != 0){
            		var objMenu:Array;
            		if (this.getParentItem(this.selectedItem).@label == "Procedures")
            			objMenu = [{label: "Script as Execute", icon:scriptexec}];
            		else if (this.getParentItem(this.selectedItem).@label == "Tables")
	            		objMenu = [{label: "Script as Select", icon:selecticon},
                            {label: "Script as Insert", icon:inserticon},
                            {label: "Script as Update", icon:updateicon},
                            {label: "Script as Delete", icon:deleteicon}, {type: "separator"},
                            {label: "Open Table", icon: opentableicon},
                            {label: "View and Edit Table", icon: updateicon},
                            {label: "Drop Table", icon: closeicon}
                        ];
	            	else if (this.getParentItem(this.selectedItem).@label == "Views")
	            		objMenu = [{label: "Script as Select", icon:selecticon}
                            , {type: "separator"}
                            , {label: "Edit View", icon: updateicon}
                            , {label: "Drop View", icon: closeicon}
                        ];
	            	if (this.getParentItem(this.selectedItem).@label == "Tables" || this.getParentItem(this.selectedItem).@label == "Views" || this.getParentItem(this.selectedItem).@label == "Procedures"){
                        if (menu_closed) {
                            menu_closed = false;
                            var myMenu:Menu = Menu.createMenu(null, objMenu);
                            myMenu.show(clickx + 25, clicky);
                            myMenu.addEventListener(MenuEvent.ITEM_CLICK, menuHandler);
                            myMenu.addEventListener(Event.CLOSE, function():void { menu_closed=true; });
                        } else {
                            menu_closed = true;
                        }
	            	}
            	}
            }
            
            private function menuHandler(e:MenuEvent):void{
            	var catalogname : String = model.currentcatalogname;
            	var scriptquery:String = "";
            	var x:int = 0;
                // todo: refactor this (in fact probably this whole class)
            	if (e.index == 0){
            		if(this.getParentItem(this.selectedItem).@label == "Procedures"){
            			scriptquery = "EXECUTE " + "\"" + catalogname + "\".\""+getParentItem(getParentItem(this.selectedItem)).@label+"\".\""+this.selectedItem.@label +"\"" + " ";
            			for (x = 0; x < this.selectedItem.children().length(); x++){
            				if (this.selectedItem.node[x].@column != "None")
            					scriptquery += this.selectedItem.node[x].@column;
 							if (x + 1 < this.selectedItem.children().length())
            					scriptquery += ", ";
            			}
            		} else { // label is Tables or Views
	            		scriptquery = "SELECT ";
	            		for (x = 0; x < this.selectedItem.children().length(); x++){
	            			scriptquery += "&quot;" + this.selectedItem.node[x].@column + "&quot;";
	            			if (x + 1 < this.selectedItem.children().length())
	            				scriptquery += ", ";
	            		}
						scriptquery += "\rFROM " + "\"" + catalogname + "\".\"" +getParentItem(getParentItem(this.selectedItem)).@label+"\".\""+this.selectedItem.@label +"\"";
            		}
            	}
            	else if(e.index == 1) {
            		if(this.getParentItem(this.selectedItem).@label == "Procedures"){
            			scriptquery += "EXEC " + "\"" + catalogname + "\".\"" +getParentItem(getParentItem(this.selectedItem)).@label+"\".\""+this.selectedItem.@label +"\"";
            		} else {
	            		scriptquery = "INSERT INTO " + "\"" + catalogname + "\".\"" +getParentItem(getParentItem(this.selectedItem)).@label+"\".\""+this.selectedItem.@label +"\"" + " \r(\r";
	            		for (x = 0; x < this.selectedItem.children().length(); x++){
	            			scriptquery += "&quot;" + this.selectedItem.node[x].@column + "&quot;";
	            			if (x + 1 < this.selectedItem.children().length())
	            				scriptquery += ", \r";
	            		}
						scriptquery += "\r)\r VALUES\r (\r";
						for (x = 0; x < this.selectedItem.children().length(); x++){
	            			scriptquery += "{" + this.selectedItem.node[x].@label + "}";
	            			if (x + 1 < this.selectedItem.children().length())
	            				scriptquery += ", \r";
	            		}
	            		scriptquery += "\r)";
	            	}
            	}
            	else if(e.index == 2) {
                    // script-update for tables, edit for views
                    if (getParentItem(this.selectedItem).@label == "Views") {
                        var loadCrap:Function = function(querydata:XML):void {
                            //trace(querydata.NewDataSet.Table.@SCHEMA_NAME);
                            var schema:String = querydata.NewDataSet.Table.SCHEMA_NAME;
                            var view:String = querydata.NewDataSet.Table.VIEW_NAME;
                            var desc:String = querydata.NewDataSet.Table.REMARKS;
                            var create_date:String = querydata.NewDataSet.Table.CREATION_TIMESTAMP;
                            var text:String = querydata.NewDataSet.Table.ORIGINAL_TEXT;

                            var vw:ViewWindow = ViewWindow(Application.application.addTab("Edit View " + view, model.main_tabnav, "viewWindow"));
                            vw.setText(text);
                            vw.editing = true;
                            vw.view_name.text = view;
                            vw.view_desc.text = desc;
                            callLater(vw.guess_schema, [schema]);
                            
                        };
                        var query : String = 'SELECT SCHEMA_NAME, VIEW_NAME,' +
                            ' REMARKS, ' +
                            ' CREATION_TIMESTAMP, ORIGINAL_TEXT' +
                            ' FROM "LOCALDB"."SYS_ROOT"."DBA_VIEWS" WHERE ' +
                            "SCHEMA_NAME = '" + getParentItem(getParentItem(selectedItem)).@label + "' AND " +
                            "VIEW_NAME = '" + selectedItem.@label + "'";
                        var sqlevent:ExecuteSQLEvent = new ExecuteSQLEvent(query, "special", loadCrap);
                        CairngormEventDispatcher.getInstance().dispatchEvent(sqlevent);                       
                    } else {
                        scriptquery = "UPDATE " + "\"" + catalogname + "\".\"" +getParentItem(getParentItem(this.selectedItem)).@label+"\".\""+this.selectedItem.@label +"\"" + " \rSET\r";
                        for (x = 0; x < this.selectedItem.children().length(); x++){
                            scriptquery += this.selectedItem.node[x].@column + " = {" + this.selectedItem.node[x].@label + "}";
                            if (x + 1 < this.selectedItem.children().length())
                                scriptquery += ", \r";
                        }
                        scriptquery += "\rWHERE {SEARCH_CONDITIONS}";
                    }
            	}
            	else if(e.index == 3) {
                    // script-delete for tabs, drop for views
                    if (getParentItem(this.selectedItem).@label == "Views") {
                        var conf:Alert = Alert.show("Are you sure you want to\ndrop this view?",
                            "Confirmation", Alert.YES|Alert.NO, Application.application as Application,
                            function(event:CloseEvent):void { // confirm handler
                                if (event.detail == Alert.YES) {
                                    var sqlevent:ExecuteSQLEvent = new ExecuteSQLEvent(
                                        'DROP VIEW "' + catalogname + '"."' + getParentItem(getParentItem(selectedItem)).@label + '"."' + selectedItem.@label + '" CASCADE',
                                        "normal");
                                    
                                    CairngormEventDispatcher.getInstance().dispatchEvent(sqlevent);
                                    var metadataevent : MetaDataEvent = new MetaDataEvent(model.currentcatalogname);
                                    CairngormEventDispatcher.getInstance().dispatchEvent(metadataevent);
                                }
                            }, confirmicon, Alert.NO);
                        
                    } else {
                        scriptquery = "DELETE FROM " + "\"" + catalogname + "\".\"" +getParentItem(getParentItem(this.selectedItem)).@label+"\".\""+this.selectedItem.@label +"\"" + "\rWHERE {SEARCH_CONDITIONS}";
                    }
                }
                else if(e.index == 5){
                    // Open the table window
                    //Application.application.openTableWindow(this.selectedItem.@label);
					var opentablewindow:OpenTableWindow = OpenTableWindow(PopUpManager.createPopUp(this.parentDocument.parentDocument, OpenTableWindow, true));
		            opentablewindow.setStyle("borderAlpha", 0.8);
		           	opentablewindow.showCloseButton = true; 
		           	opentablewindow.setTablename(getParentItem(getParentItem(this.selectedItem)).@label+"."+this.selectedItem.@label);
            	} else if (e.index == 6) {
                    // Add New Table For Editing
                    var tab_win : CreateEditTableWindow = CreateEditTableWindow(
                        Application.application.addTab("Edit Table " + this.selectedItem.@label,
                                                       model.main_tabnav, 'createTable')
                    );
                    // Grab the table data.
                    var td_event:TableDetailsEvent = new TableDetailsEvent(catalogname,
                        getParentItem(getParentItem(this.selectedItem)).@label,
                        this.selectedItem.@label, ActionEnum.GET
                    );
                    CairngormEventDispatcher.getInstance().dispatchEvent(td_event);
                } else if (e.index == 7) {
                    // Drop table
                    var drop_conf:Alert = Alert.show("Are you sure you want to\ndrop this table?",
                        "Confirmation", Alert.YES|Alert.NO, Application.application as Application,
                        function(event:CloseEvent):void { // confirm handler
                            if (event.detail == Alert.YES) {
                                var sqlevent:ExecuteSQLEvent = new ExecuteSQLEvent(
                                    'DROP TABLE "' + catalogname + '"."' + getParentItem(getParentItem(selectedItem)).@label + '"."' + selectedItem.@label + '" CASCADE',
                                    "normal");
                                CairngormEventDispatcher.getInstance().dispatchEvent(sqlevent);
                                var metadataevent : MetaDataEvent = new MetaDataEvent(model.currentcatalogname);
                                CairngormEventDispatcher.getInstance().dispatchEvent(metadataevent);
                            }
                        }, confirmicon, Alert.NO);
                }
            	DebugWindow.log("ObjectBrowser.mxml:menuHandler() - " + e.index + " - " + scriptquery);
                
                if (scriptquery != "") {
                    var makenewqw : Boolean = false;
                    var qw : QueryWindow = model.aryQueryWindows[VBox(model.main_tabnav.selectedChild).id];
                    if (qw && qw.isEmpty()) {
                        qw.setText(scriptquery);
                    } else {
                        qw = QueryWindow(Application.application.addTab("Query Window", model.main_tabnav));
                        qw.setText(scriptquery);
                    }
                    qw.guessed_schema = String(getParentItem(getParentItem(this.selectedItem)).@label);
                }
            }
		]]>
	</mx:Script>
	
</mx:Tree>
