<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright 2010 Dynamo Business Intelligence Corporation. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY Dynamo Business Intelligence Corporation ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Dynamo Business Intelligence Corporation OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   creationComplete="init();"
                   width="100%" height="100%"
                   >
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>
    <fx:Declarations>
    </fx:Declarations>
    <s:states>
        <s:State name="define_wrapper" />
        <s:State name="define_options" />
        <s:State name="load_foreign_objects" />
    </s:states>
    
    <s:HGroup includeIn="define_wrapper">
        <s:Label text="Select Wrapper: " />
        <mx:ComboBox id="wrappers_list"
                     dataProvider="{ObjectTree(model.object_tree).tree_data.remote_data.children()}"
                     labelField="@label"
                     />
        <s:Button click="show_options();" label="Next" />
    </s:HGroup>
    
    <s:HGroup includeIn="define_options">
        <s:Label text="Server Name: " left="10" top="10" />
        <s:TextInput id="server_name" />
        <s:Button label="Next" click="create_server();" />
    </s:HGroup>
    <s:VGroup includeIn="define_options" itemCreationPolicy="immediate" width="100%" height="100%">
        <mx:AdvancedDataGrid id="options_grid" rowCount="5" dataProvider="{wrapper_options}"
                             width="100%" height="100%"  bottom="10" left="10" right="10">
            <mx:columns>
                <mx:AdvancedDataGridColumn id="op_name" headerText="Option Name" dataField="shown_name" />
                                   <!--rendererIsEditor="true" itemRenderer="mx.controls.TextInput" />-->
                <mx:AdvancedDataGridColumn id="op_value" headerText="Option Value" dataField="value"
                                           rendererIsEditor="true">
                    <mx:itemRenderer>
                        <fx:Component>
                            <mx:VBox>
                                <fx:Script>
                                    <![CDATA[
                                        import mx.collections.ArrayList;
                                        import mx.controls.CheckBox;
                                        import mx.controls.TextInput;
                                        
                                        import spark.components.DropDownList;
                                        
                                        override public function set data(value:Object) : void {
                                            super.data = value;
                                            this.removeAllChildren();

                                            if (value == null) {
                                                this.addChild(new CheckBox());
                                                return;
                                            }
                                            
                                            if (value.type != 'BOOLEAN') {
                                                var input:TextInput = new TextInput();
                                                input.percentWidth = 100;
                                                input.percentHeight = 100;
                                                if (value.value != "")
                                                    input.text = value.value;
                                                else
                                                    input.text = value.default_value;
  
                                                input.addEventListener(Event.CHANGE,
                                                    function(event:Event=null):void {
                                                        value.value = event.currentTarget.text;
                                                    }
                                                );
                                                this.addChild(input);
                                            } else {
                                                var dropdown:DropDownList = new DropDownList();
                                                dropdown.dataProvider = new ArrayList(['true', 'false']);
                                                dropdown.percentWidth = 100;
                                                dropdown.percentHeight = 100;
                                                if (value.value == "")
                                                    dropdown.selectedIndex = (value.default_value.toUpperCase() == 'TRUE') ? 0 : 1;
                                                else
                                                    dropdown.selectedIndex = (value.value.toLowerCase() == 'true') ? 0 : 1;
                                                dropdown.addEventListener(Event.CHANGE,
                                                    function(event:Event=null): void {
                                                        value.value = event.currentTarget.selectedItem;
                                                    }
                                                );
                                                this.addChild(dropdown);
                                            }
                                        }
                                    ]]>
                                </fx:Script>
                            </mx:VBox>
                       </fx:Component>
                    </mx:itemRenderer>
                </mx:AdvancedDataGridColumn>
                    <!--itemRenderer="mx.controls.TextInput" />-->
                <mx:AdvancedDataGridColumn id="op_required" headerText="Required" dataField="required" />
                <mx:AdvancedDataGridColumn id="op_desc" headerText="Description" dataField="desc"
                                           showDataTips="true" />
            </mx:columns>
        </mx:AdvancedDataGrid>
    </s:VGroup>
    
    <fx:Script>
        <![CDATA[
            import mx.controls.Alert;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.flexsqladmin.sqladmin.commands.ForeignDataCommand;
            import com.flexsqladmin.sqladmin.events.GeneralServiceEvent;
            import com.flexsqladmin.sqladmin.events.PerformanceEvent;
            import com.flexsqladmin.sqladmin.model.ModelLocator;
            import com.flexsqladmin.sqladmin.utils.CustomFuncs;
            
            [Bindable]
            private var model:ModelLocator = ModelLocator.getInstance();
            
            [Bindable]
            private var wrapper_options:Array = [];
            
            [Bindable]
            private var wrappers:XMLList = new XMLList();
            
            public function init() : void {
                //for (var i:Number = 0; i < options_grid.rowCount; i++)
                //    add_option();
                
                if (ObjectTree(model.object_tree).tree_data.remote_data.children().length() == 0) {
                    ObjectTree(model.object_tree).expandItem(model.object_tree.tree_data..remote_data[0], true, false);
                    ObjectTree(model.object_tree).expandItem(model.object_tree.tree_data..remote_data[0], false, false);

                }
            }
            
            public function set_wrapper(name:String) : void {
                for (var i:Number = 0; i < wrappers_list.dataProvider.length; i++) {
                    if (wrappers_list.dataProvider[i].@label == name) {
                        wrappers_list.selectedIndex = i;
                        break;
                    }
                }
            }
            
            private function show_options() : void {
                currentState = 'define_options';
                var get_opts_event:GeneralServiceEvent = new GeneralServiceEvent(ForeignDataCommand,
                    'getWrapperOptions', {'wrapper': wrappers_list.selectedLabel},
                    {'callback': load_options}
                );
                CairngormEventDispatcher.getInstance().dispatchEvent(get_opts_event);
                op_value.width = measureText(CustomFuncs.wordMult("W", 8)).width;
                op_required.width = measureText(CustomFuncs.wordMult("W", 8)).width;
            }
            
            public function load_options(r:*) : void {
                var results:XML = XML(r);
                for each (var el:XML in results.children()) {
                    wrapper_options.push({'name': '"' + el.@name + '"', 'default_value': el.@value,
                        'value': el.@value, 'shown_name': el.@name,
                        'required': el.@required, 'desc': el.@desc, 'type': el.@type});
                }
                options_grid.dataProvider = wrapper_options;
            }
            
            public function create_server() : void {
                var cs_event:GeneralServiceEvent = new GeneralServiceEvent(ForeignDataCommand,
                    'createServer', {'server_name': server_name.text,
                        'wrapper_name': wrappers_list.selectedLabel,
                        'options': wrapper_options}, {'callback': check_server_creation}
                );
                CairngormEventDispatcher.getInstance().dispatchEvent(cs_event);
            }
            
            public function check_server_creation(r:*) : void {
                var response:String = String(r);
                if (response == "") {
                    currentState = 'load_foreign_objects';
                    Alert.show("Foreign Server Created", "Success");
                    model.object_tree.addItem('server', server_name.text.toUpperCase(),
                        'remote_data', 'wrapper@', wrappers_list.selectedLabel, 'servers');
                } else {
                    Alert.show("Could not create foreign server: " + response, "Error");
                }
            }
            
        ]]>
    </fx:Script>
</s:Group>
