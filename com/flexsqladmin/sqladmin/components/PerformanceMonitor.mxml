<?xml version="1.0" encoding="utf-8"?>
<!--
Dynamo Admin UI is a web service project for administering LucidDB
Copyright (C) 2010 Dynamo Business Intelligence Corporation

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version approved by Dynamo Business Intelligence Corporation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
-->
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml"
                width="100%" height="100%"
                paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"
                liveDragging="true"
                creationComplete="init();" xmlns:components="com.flexsqladmin.sqladmin.components.*">

    <mx:VBox height="100%" width="50%">
        <mx:HBox>
            <mx:Label text="Update Frequency (seconds):" />
            <mx:ComboBox id="frequency" change="freq_change();" selectedIndex="2">
                <mx:Object label="0.1" />
                <mx:Object label="0.5" />
                <mx:Object label="1" />
                <mx:Object label="5" />
                <mx:Object label="10" />
                <mx:Object label="30" />
                <mx:Object label="60" />
            </mx:ComboBox>
        </mx:HBox>
        <mx:HBox>
            <mx:Label text="Graph Layout:" />
            <mx:ComboBox id="layout" change="change_layout();">
                <mx:Object label="Two Column" cols="2" />
                <mx:Object label="One Column" cols="1" />
            </mx:ComboBox>
        </mx:HBox>
                
        <mx:Tree id="counters" height="100%" width="100%" rowHeight="25" indentation="3"
                 dataProvider="{perf_counters}" creationComplete="load_tree();"
                 showRoot="false" doubleClickEnabled="true" itemClick="tree_itemClick(event);">
            <mx:itemRenderer>
                <mx:Component>                        
                    <components:ObjectTreeRenderer>
                        <mx:Script>
                            <![CDATA[
                                import mx.controls.CheckBox;
                                import mx.controls.treeClasses.TreeListData;
                                
                                public var disCheck:CheckBox;
                                
                                override protected function createChildren() : void {
                                    super.createChildren();
                                    disCheck = new CheckBox();
                                    disCheck.width = 15;
                                    disCheck.baseline = 0;
                                    disBox.addChild(disCheck);
                                }
                                
                                override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void {
                                    treeListData = TreeListData(listData);
                                    if (treeListData != null) {
                                        if (super.data) {
                                            var node:XML = treeListData.item as XML;
                                            if (!node.hasOwnProperty('@selected')) {
                                                disCheck.visible = false;
                                            } else {
                                                disCheck.visible = true;
                                                disCheck.selected = (node.@selected == 'true');
                                            }
                                        }
                                    }
                                    super.updateDisplayList(unscaledWidth, unscaledHeight);
                                }
                                
                            ]]>
                        </mx:Script>
                    </components:ObjectTreeRenderer>
                </mx:Component>
            </mx:itemRenderer>
        </mx:Tree>
    </mx:VBox>
    
    <mx:VBox width="100%" height="100%" id="graphs">
        <mx:Label text="Select items in the tree to add line charts" />
        <mx:HBox enabled="false">
            <mx:Label text="Coming soon..." />
            <mx:Button label="Define Pie Chart" click="make_pie();" />
            <mx:Button label="Define Bar Chart" click="make_bar();" />
        </mx:HBox>
        <mx:HBox width="100%" height="100%">
            <mx:VBox width="0" height="100%" id="graphs_single" />
            <mx:VBox width="50%" height="100%" id="graphs_left" />
            <mx:VBox width="50%" height="100%" id="graphs_right" />
        </mx:HBox>
    </mx:VBox>
    
    <mx:Script>
        <![CDATA[
            import mx.charts.series.PieSeries;
            import mx.charts.PieChart;
            import mx.events.ListEvent;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.flexsqladmin.sqladmin.events.PerformanceEvent;
            
            import mx.binding.utils.BindingUtils;
            import mx.charts.AxisRenderer;
            import mx.charts.CategoryAxis;
            import mx.charts.Legend;
            import mx.charts.LineChart;
            import mx.charts.LinearAxis;
            import mx.charts.chartClasses.IAxisRenderer;
            import mx.charts.renderers.CircleItemRenderer;
            import mx.charts.series.LineSeries;
            import mx.collections.ArrayCollection;
            import mx.containers.Panel;
            import mx.graphics.SolidColorStroke;

            private var time_axis:LinearAxis;
            
            private var data_collections:Object = new Object();
            private var units_collections:Object = new Object();
            
            public var update_timer:Timer;
            
            private var series_num:Number = 0;
            private var stroke_colors:Array = [
                0xecd078,
                0xd95b43,
                0x542437,
                0xc02942,
                0x53777a,
                0x4ecdc4,
                0x556270,
                0xc7f464,
                0xff6b6b,
                0xc44d58
            ];
            
            private var graph_side:VBox;
            
            [Bindable]
            private var perf_counters:XML;
            
            public function init() : void {
                time_axis = new LinearAxis();
                time_axis.minimum = 0;
                time_axis.maximum = 60;
                time_axis.direction = 'inverted';
                
                graph_side = graphs_left;
                
                update_timer = new Timer(Number(frequency.selectedLabel) * 1000);
                update_timer.addEventListener(TimerEvent.TIMER, fetch_updates);
                update_timer.start();
            }
            
            private function load_tree() : void {
                var perf_event:PerformanceEvent = new PerformanceEvent(this);
                CairngormEventDispatcher.getInstance().dispatchEvent(perf_event);
            }
            
            private function freq_change() : void {
                update_timer.stop();
                update_timer.delay = Number(frequency.selectedLabel) * 1000;
                update_timer.start();
            }
            
            private function change_layout() : void {
                if (layout.selectedItem.cols == '1') {
                    for each (var obj:Panel in graphs_left.getChildren()) {
                        graphs_left.removeChild(obj);
                        graphs_single.addChild(obj);
                    }
                    for each (obj in graphs_right.getChildren()) {
                        graphs_right.removeChild(obj);
                        graphs_single.addChild(obj);
                    }
                    graphs_left.percentWidth = 0;
                    graphs_right.percentWidth = 0;
                    graphs_single.percentWidth = 100;
                } else {
                    var side:String = 'left';
                    for each (obj in graphs_single.getChildren()) {
                        graphs_single.removeChild(obj);
                        if (side == 'left')
                            graphs_left.addChild(obj);
                        else
                            graphs_right.addChild(obj);
                        side = (side == 'left') ? 'right' : 'left';
                    }
                    graphs_left.percentWidth = 50;
                    graphs_right.percentWidth = 50;
                    graphs_single.percentWidth = 0;
                }
            }
            
            private function make_pie() : void {
                var pie:PieChart = new PieChart();
                var data:Array = [
                    {name: 'JvmMemoryUnused', value: 50 },
                    {name: 'JvmMemoryAllocated', value: 100},
                ];
                pie.dataProvider = data;
                pie.percentWidth = 100;
                pie.percentHeight = 100;
                pie.showDataTips = true;
                
                var pie_series:PieSeries = new PieSeries();
                pie_series.field = 'value';
                pie_series.nameField = 'name';
                pie_series.setStyle('labelPosition', 'outside');
                pie_series.labelFunction = function(... args) : String {
                    return args[0].name + ": " + String(args[0].value);
                };
                
                pie.series = [pie_series];
                graphs_single.addChild(pie);
            }
            
            private function make_bar() : void {
                
            }
            
            private function fetch_updates(event:TimerEvent=null) : void {
                var names:Array = [];
                for (var name:String in data_collections) {
                    names.push(name);
                }
                
                if (names.length > 0) {
                    var perf_event:PerformanceEvent = new PerformanceEvent(this, names.join(','));
                    CairngormEventDispatcher.getInstance().dispatchEvent(perf_event);
                }
            }
            
            public function addGraph(name:String, units:String) : void {
                var data:ArrayCollection = new ArrayCollection([]);
                data_collections[name] = data;
                
                var series:LineSeries = new LineSeries();
                //series.setStyle('itemRenderer', new ClassFactory(mx.charts.renderers.CircleItemRenderer));
                series.xField = 'time';
                series.yField = 'value';
                series.displayName = 'Data point for ' + name;
                BindingUtils.bindProperty(series, 'dataProvider', this.data_collections, name);
                
                var stroke:SolidColorStroke = new SolidColorStroke();
                if (series_num == stroke_colors.length)
                    series_num = 0;
                stroke.color = stroke_colors[series_num];
                stroke.weight = 5;
                stroke.alpha = 0.8;
                series_num++;
                
                series.setStyle('lineStroke', stroke);

                /*if (add_to.selected) {
                    // we have to assign for flex to update (just use += []
                    var tmp:Array = LineChart(Panel(graph_side.getChildAt(0)).getChildAt(0)).series;
                    tmp.push(series);
                    LineChart(Panel(graph_side.getChildAt(0)).getChildAt(0)).series = tmp;
                    return;
                }*/

                var graph:LineChart = new LineChart();
                graph.dataTipMode = "single";
                graph.id = 'graph-' + name;
                graph.percentWidth = 100;
                graph.percentHeight = 100;
                graph.horizontalAxis = time_axis;
                var vert_axis:LinearAxis = new LinearAxis();
                vert_axis.autoAdjust = true;
                vert_axis.baseAtZero = false;
                graph.verticalAxis = vert_axis;
                graph.series = [series];
                graph.invalidateSeriesStyles();
                graph.showDataTips = true;
                
                var panel:Panel = new Panel();
                panel.percentWidth = 100;
                panel.percentHeight = 100;
                panel.minHeight = 225;
                panel.name = name;
                panel.title = 'Graph for ' + name;
                panel.addChild(graph);
                if (layout.selectedItem.cols == '2') {
                    graph_side.addChild(panel);
                    graph_side = (graph_side == graphs_left) ? graphs_right : graphs_left;
                } else {
                    graphs_single.addChild(panel);
                }
                
                var units_box:HBox = new HBox();
                var lab:Label = new Label();
                lab.text = "Convert Units...";
                var units_menu:ComboBox = new ComboBox();
                units_menu.dataProvider = [{label: 'scalar'}, {label: "bytes"}, {label: "kilobytes"},
                    {label: "pages"},
                    {label: "megabytes"},
                    {label: "ns"}, {label: "seconds"}, {label: "minutes"}, {label: "hours"},
                    {label: "days"}, {label: "years"}];
                units_menu.id = 'units-' + name;
                units_collections[name] = units_menu;
                units_box.addChild(lab);
                units_box.addChild(units_menu);
                panel.addChild(units_box);
            }
            
            public function removeGraph(name:String) : void {
                if (graphs_left.getChildByName(name)) {
                    graphs_left.removeChild(graphs_left.getChildByName(name));
                    graph_side = graphs_left;
                } else if (graphs_right.getChildByName(name)) {
                    graphs_right.removeChild(graphs_right.getChildByName(name));
                    graph_side = graphs_right;
                } else {
                    graphs_single.removeChild(graphs_single.getChildByName(name));
                }
                delete data_collections[name];
                series_num--;
                if (series_num == -1)
                    series_num = stroke_colors.length - 1;
            }
            
            public function addData(data:XML, names:String) : void {
                for each (var name:String in names.split(',')) {
                if (name == '') {
                    //trace(data.toXMLString());
                    perf_counters = <counters />;
                    for each (var el:XML in data['return']) {
                        var node:XML = <counter label={el.counterName} selected="false" />;
                        var possible_cat:XML = perf_counters.category.(@label == el.counterCategory)[0];
                        if (possible_cat) {
                            if (el.counterSubcategory != '') {
                                var possible_subcat:XML = possible_cat.subcategory.(@label == el.counterSubcategory)[0];
                                if (possible_subcat)
                                    possible_subcat.appendChild(node);
                                else
                                    possible_cat.appendChild(<subcategory label={el.counterSubcategory}>{node}</subcategory>);
                            } else {
                                possible_cat.appendChild(node);
                            }
                        } else {
                            if (el.counterSubcategory != '') {
                                perf_counters.appendChild(<category label={el.counterCategory}><subcategory label={el.counterSubcategory}>{node}</subcategory></category>);
                            } else {
                                perf_counters.appendChild(<category label={el.counterCategory}>{node}</category>);
                            }
                        }
                    }
                }
                
                if (!data_collections.hasOwnProperty(name))
                    continue;
                for each (el in data['return'])
                    if (el.counterName == name)
                        break;
                if (!el.hasOwnProperty('counterUnits') || el.counterUnits == 'null')
                    el.counterUnits = 'scalar';
                var val:Number = convert_amount(Number(el.counterValue),
                    el.counterUnits, units_collections[name].selectedLabel
                );
                if (val == Number(el.counterValue) &&
                        el.counterUnits != units_collections[name].selectedLabel)
                    for (var idx:Number = 0; idx < units_collections[name].dataProvider.length; idx++) {
                        if (units_collections[name].dataProvider[idx].label == el.counterUnits)
                            units_collections[name].selectedIndex = idx;
                    }
                    //units_collections[name].selectedLabel = el.counterUnits;
                var item:Object = {time: 0, value: val, units: units_collections[name].selectedLabel}
                for (var i:Number = 0; i < data_collections[name].length; i++) {
                    data_collections[name][i]['time'] += Number(frequency.selectedLabel);
                    if (data_collections[name][i]['time'] > time_axis.maximum)
                        data_collections[name].removeItemAt(i);
                    if (data_collections[name][i]['units'] != units_collections[name].selectedLabel) {
                        data_collections[name][i]['value'] = convert_amount(
                            Number(data_collections[name][i]['value']),
                            data_collections[name][i]['units'],
                            units_collections[name].selectedLabel
                        );
                        data_collections[name][i]['units'] = units_collections[name].selectedLabel;
                    }
                }
                data_collections[name].addItem(item);
                //data_collections[name].refresh();
                }
            }
            
            private function convert_amount(val:Number, from_units:String, to_units:String,
                                                        reverse:Boolean = false) : Number {
                
                // prolly a better way to do this
                if (from_units == to_units)
                    return val;
                
                var factor:Function;
                if (reverse)
                    factor = function(a:Number, b:Number) : Number { return a * b };
                else
                    factor = function(a:Number, b:Number) : Number { return a / b };
                
                if (from_units == 'bytes' && to_units == 'megabytes')
                    return factor(val, 1048576.0);
                if (from_units == 'bytes' && to_units == 'kilobytes')
                    return factor(val, 1024.0);
                if (from_units == 'kilobytes' && to_units == 'megabytes')
                    return factor(val, 1024.0);
                if (from_units == 'kilobytes' && to_units == 'pages')
                    return factor(val, 32000.0);
                if (from_units == 'bytes' && to_units == 'pages')
                    return factor(convert_amount(val, 'bytes', 'kilobytes', reverse), 32000.0);
                if (from_units == 'megabytes' && to_units == 'pages')
                    return factor(val, 32000.0 / 1024.0);

                if (from_units == 'ns' && to_units == 'seconds')
                    return factor(val, 1000000000.0);

                for each (var from:String in ['ns', 'seconds']) {
                if (from_units == from) {
                    if (to_units == 'minutes')
                        return factor(convert_amount(val, from, 'seconds', reverse), 60.0);
                    if (to_units == 'hours')
                        return factor(convert_amount(val, from, 'minutes', reverse), 60.0);
                    if (to_units == 'days')
                        return factor(convert_amount(val, from, 'hours', reverse), 24.0);
                    if (to_units == 'years')
                        return factor(convert_amount(val, from, 'days', reverse), 365.25);
                }
                }
                if (from_units == 'minutes' && to_units == 'hours')
                    return factor(val, 60.0);
                if (from_units == 'minutes' && to_units == 'days')
                    return factor(convert_amount(val, from_units, 'hours', reverse), 24.0);
                if (from_units == 'minutes' && to_units == 'years')
                    return factor(convert_amount(val, from_units, 'days', reverse), 365.25);
                if (from_units == 'hours' && to_units == 'days')
                    return factor(val, 24.0);
                if (from_units == 'hours' && to_units == 'years')
                    return factor(convert_amount(val, from_units, 'days', reverse), 365.25);
                if (from_units == 'days' && to_units == 'years')
                    return factor(val, 365.25);
                
                if (!reverse)
                    return convert_amount(val, to_units, from_units, true);
                
                return val;
            }
            
            // Tree functions
            public function tree_itemClick(event:ListEvent) : void {
                var item:XML = XML(event.currentTarget.selectedItem);
                if (!item.hasOwnProperty('@selected')) return;
                
                item.@selected = (item.@selected == 'false') ? 'true' : 'false';
                if (item.@selected == 'true')
                    addGraph(item.@label, item.@units);
                else
                    removeGraph(item.@label);
            }

        ]]>
    </mx:Script>
</mx:HDividedBox>
