<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright 2010 Dynamo Business Intelligence Corporation. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY Dynamo Business Intelligence Corporation ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Dynamo Business Intelligence Corporation OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
                paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"
                liveDragging="true"
                creationComplete="init();" xmlns:components="com.flexsqladmin.sqladmin.components.*">

    <mx:VBox height="100%" width="50%">
        <mx:Label text="Update Frequency:" />
        <mx:ComboBox id="frequency" change="freq_change();" selectedIndex="2">
            <mx:Object label="0.1" />
            <mx:Object label="0.5" />
            <mx:Object label="1" />
            <mx:Object label="5" />
            <mx:Object label="10" />
            <mx:Object label="30" />
            <mx:Object label="60" />
        </mx:ComboBox>
                
        <mx:Tree id="counters" height="100%" width="100%" rowHeight="25" indentation="3"
                 dataProvider="{perf_counters}" creationComplete="load_tree();"
                 showRoot="false" doubleClickEnabled="true" itemClick="tree_itemClick(event);">
            <mx:itemRenderer>
                <mx:Component>                        
                    <components:ObjectTreeRenderer>
                        <mx:Script>
                            <![CDATA[
                                import mx.controls.CheckBox;
                                import mx.controls.treeClasses.TreeListData;
                                
                                public var disCheck:CheckBox;
                                
                                override protected function createChildren() : void {
                                    super.createChildren();
                                    disCheck = new CheckBox();
                                    disCheck.width = 15;
                                    disCheck.baseline = 0;
                                    disBox.addChild(disCheck);
                                }
                                
                                override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void {
                                    treeListData = TreeListData(listData);
                                    if (treeListData != null) {
                                        if (super.data) {
                                            var node:XML = treeListData.item as XML;
                                            if (!node.hasOwnProperty('@selected')) {
                                                disCheck.visible = false;
                                            } else {
                                                disCheck.visible = true;
                                                disCheck.selected = (node.@selected == 'true');
                                            }
                                        }
                                    }
                                    super.updateDisplayList(unscaledWidth, unscaledHeight);
                                }
                                
                            ]]>
                        </mx:Script>
                    </components:ObjectTreeRenderer>
                </mx:Component>
            </mx:itemRenderer>
        </mx:Tree>
    </mx:VBox>
    
    <mx:VBox width="100%" height="100%" id="graphs">
        <mx:Label text="Convert Units..." />
        <mx:ComboBox id="units">
            <mx:Object label="megabytes" />
            <mx:Object label="kilobytes" />
            <mx:Object label="bytes" />
            <mx:Object label="seconds" />
        </mx:ComboBox>
        <mx:HBox width="100%" height="100%">
            <mx:VBox width="50%" height="100%" id="graphs_left" />
            <mx:VBox width="50%" height="100%" id="graphs_right" />
        </mx:HBox>
    </mx:VBox>
    
    <mx:Script>
        <![CDATA[
            import mx.events.ListEvent;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            import com.flexsqladmin.sqladmin.events.PerformanceEvent;
            
            import mx.binding.utils.BindingUtils;
            import mx.charts.AxisRenderer;
            import mx.charts.CategoryAxis;
            import mx.charts.Legend;
            import mx.charts.LineChart;
            import mx.charts.LinearAxis;
            import mx.charts.chartClasses.IAxisRenderer;
            import mx.charts.renderers.CircleItemRenderer;
            import mx.charts.series.LineSeries;
            import mx.collections.ArrayCollection;
            import mx.containers.Panel;
            import mx.graphics.SolidColorStroke;

            private var time_axis:LinearAxis;
            
            private var data_collections:Object = new Object();
            
            public var update_timer:Timer;
            
            private var series_num:Number = 0;
            private var stroke_colors:Array = [
                0xecd078,
                0xd95b43,
                0x542437,
                0xc02942,
                0x53777a,
                0x4ecdc4,
                0x556270,
                0xc7f464,
                0xff6b6b,
                0xc44d58
            ];
            
            private var graph_side:VBox;
            
            [Bindable]
            private var perf_counters:XML;
            
            public function init() : void {
                time_axis = new LinearAxis();
                time_axis.minimum = 0;
                time_axis.maximum = 60;
                time_axis.direction = 'inverted';
                
                graph_side = graphs_left;
                
                update_timer = new Timer(Number(frequency.selectedLabel) * 1000);
                update_timer.addEventListener(TimerEvent.TIMER, fetch_updates);
                update_timer.start();
            }
            
            private function load_tree() : void {
                var perf_event:PerformanceEvent = new PerformanceEvent(this);
                CairngormEventDispatcher.getInstance().dispatchEvent(perf_event);
            }
            
            private function freq_change() : void {
                update_timer.stop();
                update_timer.delay = Number(frequency.selectedLabel) * 1000;
                update_timer.start();
            }
            
            private function fetch_updates(event:TimerEvent=null) : void {
                var names:Array = [];
                for (var name:String in data_collections) {
                    names.push(name);
                }
                
                if (names.length > 0) {
                    var perf_event:PerformanceEvent = new PerformanceEvent(this, names.join(','));
                    CairngormEventDispatcher.getInstance().dispatchEvent(perf_event);
                }
            }
            
            public function addGraph(name:String) : void {
                var data:ArrayCollection = new ArrayCollection([]);
                data_collections[name] = data;
                
                var series:LineSeries = new LineSeries();
                //series.setStyle('itemRenderer', new ClassFactory(mx.charts.renderers.CircleItemRenderer));
                series.xField = 'time';
                series.yField = 'value';
                series.displayName = 'Data point for ' + name;
                BindingUtils.bindProperty(series, 'dataProvider', this.data_collections, name);
                
                var stroke:SolidColorStroke = new SolidColorStroke();
                if (series_num == stroke_colors.length)
                    series_num = 0;
                stroke.color = stroke_colors[series_num];
                stroke.weight = 5;
                stroke.alpha = 0.8;
                series_num++;
                
                series.setStyle('lineStroke', stroke);

                /*if (add_to.selected) {
                    // we have to assign for flex to update (just use += []
                    var tmp:Array = LineChart(Panel(graph_side.getChildAt(0)).getChildAt(0)).series;
                    tmp.push(series);
                    LineChart(Panel(graph_side.getChildAt(0)).getChildAt(0)).series = tmp;
                    return;
                }*/

                var graph:LineChart = new LineChart();
                graph.percentWidth = 100;
                graph.percentHeight = 100;
                graph.horizontalAxis = time_axis;
                graph.series = [series];
                graph.invalidateSeriesStyles();
                graph.showDataTips = true;
                
                var legend:Legend = new Legend();
                

                var panel:Panel = new Panel();
                panel.percentWidth = 100;
                panel.percentHeight = 100;
                panel.minHeight = 225;
                panel.name = name;
                panel.title = 'Graph for ' + name;
                panel.addChild(graph);
                graph_side.addChild(panel);
                graph_side = (graph_side == graphs_left) ? graphs_right : graphs_left;
            }
            
            public function removeGraph(name:String) : void {
                if (graphs_left.getChildByName(name)) {
                    graphs_left.removeChild(graphs_left.getChildByName(name));
                } else {
                    graphs_right.removeChild(graphs_right.getChildByName(name));
                }
                delete data_collections[name];
                series_num--;
                if (series_num == -1)
                    series_num = stroke_colors.length - 1;
            }
            
            public function addData(data:XML, names:String) : void {
                for each (var name:String in names.split(',')) {
                if (name == '') {
                    //trace(data.toXMLString());
                    perf_counters = <counters />;
                    for each (var el:XML in data['return']) {
                        var node:XML = <counter label={el.counterName} selected="false" />;
                        var possible_cat:XML = perf_counters.category.(@label == el.counterCategory)[0];
                        if (possible_cat) {
                            if (el.counterSubcategory != '') {
                                var possible_subcat:XML = possible_cat.subcategory.(@label == el.counterSubcategory)[0];
                                if (possible_subcat)
                                    possible_subcat.appendChild(node);
                                else
                                    possible_cat.appendChild(<subcategory label={el.counterSubcategory}>{node}</subcategory>);
                            } else {
                                possible_cat.appendChild(node);
                            }
                        } else {
                            if (el.counterSubcategory != '') {
                                perf_counters.appendChild(<category label={el.counterCategory}><subcategory label={el.counterSubcategory}>{node}</subcategory></category>);
                            } else {
                                perf_counters.appendChild(<category label={el.counterCategory}>{node}</category>);
                            }
                        }
                    }
                }
                
                if (!data_collections.hasOwnProperty(name))
                    continue;
                for each (el in data['return'])
                    if (el.counterName == name)
                        break;
                var val:Number = convert_amount(Number(el.counterValue), el.counterUnits);
                var item:Object = {time: 0, value: val, units: units.selectedLabel}
                for (var i:Number = 0; i < data_collections[name].length; i++) {
                    data_collections[name][i]['time'] += Number(frequency.selectedLabel);
                    if (data_collections[name][i]['time'] > time_axis.maximum)
                        data_collections[name].removeItemAt(i);
                    if (data_collections[name][i]['units'] != units.selectedLabel) {
                        data_collections[name][i]['value'] = convert_amount(
                            Number(data_collections[name][i]['value']),
                            data_collections[name][i]['units']
                        );
                        data_collections[name][i]['units'] = units.selectedLabel;
                    }
                }
                data_collections[name].addItem(item);
                //data_collections[name].refresh();
                }
            }
            
            private function convert_amount(val:Number, from_units:String, to_units:String='') : Number {
                if (to_units == '')
                    to_units = units.selectedLabel;
                // Should we just outsource this to Google or something?
                if (from_units == to_units)
                    return val;
                if (from_units == 'bytes' && to_units == 'megabytes')
                    return val / 1048576;
                if (from_units == 'bytes' && to_units == 'kilobytes')
                    return val / 1024;
                if (from_units == 'megabytes' && to_units == 'kilobytes')
                    return val * 1024;
                if (from_units == 'megabytes' && to_units == 'bytes')
                    return val * 1048576;
                if (from_units == 'kilobytes' && to_units == 'megabytes')
                    return val / 1024;
                if (from_units == 'kilobytes' && to_units == 'bytes')
                    return val * 1024;
                if (from_units == 'ns' && to_units == 'seconds')
                    return val / 100000;
                if (from_units == 'seconds' && to_units == 'ns')
                    return val * 100000;
                
                return val;
            }
            
            // Tree functions
            public function tree_itemClick(event:ListEvent) : void {
                var item:XML = XML(event.currentTarget.selectedItem);
                if (!item.hasOwnProperty('@selected')) return;
                
                item.@selected = (item.@selected == 'false') ? 'true' : 'false';
                if (item.@selected == 'true')
                    addGraph(item.@label);
                else
                    removeGraph(item.@label);
            }

        ]]>
    </mx:Script>
</mx:HDividedBox>
